//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.4952
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FET.POS.Model.DTO {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OPT11_HGCONVERTIBLE_DTO")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OPT11_HGCONVERTIBLE_DTO : global::System.Data.DataSet {
        
        private HG_CONVERTIBLEDataTable tableHG_CONVERTIBLE;
        
        private HG_EXCHANGE_TYPEDataTable tableHG_EXCHANGE_TYPE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OPT11_HGCONVERTIBLE_DTO() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OPT11_HGCONVERTIBLE_DTO(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["HG_CONVERTIBLE"] != null)) {
                    base.Tables.Add(new HG_CONVERTIBLEDataTable(ds.Tables["HG_CONVERTIBLE"]));
                }
                if ((ds.Tables["HG_EXCHANGE_TYPE"] != null)) {
                    base.Tables.Add(new HG_EXCHANGE_TYPEDataTable(ds.Tables["HG_EXCHANGE_TYPE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HG_CONVERTIBLEDataTable HG_CONVERTIBLE {
            get {
                return this.tableHG_CONVERTIBLE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HG_EXCHANGE_TYPEDataTable HG_EXCHANGE_TYPE {
            get {
                return this.tableHG_EXCHANGE_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OPT11_HGCONVERTIBLE_DTO cln = ((OPT11_HGCONVERTIBLE_DTO)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["HG_CONVERTIBLE"] != null)) {
                    base.Tables.Add(new HG_CONVERTIBLEDataTable(ds.Tables["HG_CONVERTIBLE"]));
                }
                if ((ds.Tables["HG_EXCHANGE_TYPE"] != null)) {
                    base.Tables.Add(new HG_EXCHANGE_TYPEDataTable(ds.Tables["HG_EXCHANGE_TYPE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHG_CONVERTIBLE = ((HG_CONVERTIBLEDataTable)(base.Tables["HG_CONVERTIBLE"]));
            if ((initTable == true)) {
                if ((this.tableHG_CONVERTIBLE != null)) {
                    this.tableHG_CONVERTIBLE.InitVars();
                }
            }
            this.tableHG_EXCHANGE_TYPE = ((HG_EXCHANGE_TYPEDataTable)(base.Tables["HG_EXCHANGE_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableHG_EXCHANGE_TYPE != null)) {
                    this.tableHG_EXCHANGE_TYPE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OPT11_HGCONVERTIBLE_DTO";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OPT11_HGCONVERTIBLE_DTO.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHG_CONVERTIBLE = new HG_CONVERTIBLEDataTable();
            base.Tables.Add(this.tableHG_CONVERTIBLE);
            this.tableHG_EXCHANGE_TYPE = new HG_EXCHANGE_TYPEDataTable();
            base.Tables.Add(this.tableHG_EXCHANGE_TYPE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHG_CONVERTIBLE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHG_EXCHANGE_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OPT11_HGCONVERTIBLE_DTO ds = new OPT11_HGCONVERTIBLE_DTO();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void HG_CONVERTIBLERowChangeEventHandler(object sender, HG_CONVERTIBLERowChangeEvent e);
        
        public delegate void HG_EXCHANGE_TYPERowChangeEventHandler(object sender, HG_EXCHANGE_TYPERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HG_CONVERTIBLEDataTable : global::System.Data.TypedTableBase<HG_CONVERTIBLERow> {
            
            private global::System.Data.DataColumn columnCONVERT_NO;
            
            private global::System.Data.DataColumn columnCONVERT_NAME;
            
            private global::System.Data.DataColumn columnS_DATE;
            
            private global::System.Data.DataColumn columnE_DATE;
            
            private global::System.Data.DataColumn columnDIVIDABLE_POINT;
            
            private global::System.Data.DataColumn columnCONVERT_CURRENCY;
            
            private global::System.Data.DataColumn columnCREATE_USER;
            
            private global::System.Data.DataColumn columnCREATE_DTM;
            
            private global::System.Data.DataColumn columnMODI_USER;
            
            private global::System.Data.DataColumn columnMODI_DTM;
            
            private global::System.Data.DataColumn columnHG_EXCHANGE_TYPE;
            
            private global::System.Data.DataColumn columnCONVERT_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_CONVERTIBLEDataTable() {
                this.TableName = "HG_CONVERTIBLE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HG_CONVERTIBLEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HG_CONVERTIBLEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONVERT_NOColumn {
                get {
                    return this.columnCONVERT_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONVERT_NAMEColumn {
                get {
                    return this.columnCONVERT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S_DATEColumn {
                get {
                    return this.columnS_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn E_DATEColumn {
                get {
                    return this.columnE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIVIDABLE_POINTColumn {
                get {
                    return this.columnDIVIDABLE_POINT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONVERT_CURRENCYColumn {
                get {
                    return this.columnCONVERT_CURRENCY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_USERColumn {
                get {
                    return this.columnCREATE_USER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DTMColumn {
                get {
                    return this.columnCREATE_DTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODI_USERColumn {
                get {
                    return this.columnMODI_USER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODI_DTMColumn {
                get {
                    return this.columnMODI_DTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HG_EXCHANGE_TYPEColumn {
                get {
                    return this.columnHG_EXCHANGE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONVERT_IDColumn {
                get {
                    return this.columnCONVERT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_CONVERTIBLERow this[int index] {
                get {
                    return ((HG_CONVERTIBLERow)(this.Rows[index]));
                }
            }
            
            public event HG_CONVERTIBLERowChangeEventHandler HG_CONVERTIBLERowChanging;
            
            public event HG_CONVERTIBLERowChangeEventHandler HG_CONVERTIBLERowChanged;
            
            public event HG_CONVERTIBLERowChangeEventHandler HG_CONVERTIBLERowDeleting;
            
            public event HG_CONVERTIBLERowChangeEventHandler HG_CONVERTIBLERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHG_CONVERTIBLERow(HG_CONVERTIBLERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_CONVERTIBLERow AddHG_CONVERTIBLERow(string CONVERT_NO, string CONVERT_NAME, System.DateTime S_DATE, System.DateTime E_DATE, decimal DIVIDABLE_POINT, decimal CONVERT_CURRENCY, string CREATE_USER, System.DateTime CREATE_DTM, string MODI_USER, System.DateTime MODI_DTM, string HG_EXCHANGE_TYPE, string CONVERT_ID) {
                HG_CONVERTIBLERow rowHG_CONVERTIBLERow = ((HG_CONVERTIBLERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CONVERT_NO,
                        CONVERT_NAME,
                        S_DATE,
                        E_DATE,
                        DIVIDABLE_POINT,
                        CONVERT_CURRENCY,
                        CREATE_USER,
                        CREATE_DTM,
                        MODI_USER,
                        MODI_DTM,
                        HG_EXCHANGE_TYPE,
                        CONVERT_ID};
                rowHG_CONVERTIBLERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHG_CONVERTIBLERow);
                return rowHG_CONVERTIBLERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_CONVERTIBLERow FindByCONVERT_ID(string CONVERT_ID) {
                return ((HG_CONVERTIBLERow)(this.Rows.Find(new object[] {
                            CONVERT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HG_CONVERTIBLEDataTable cln = ((HG_CONVERTIBLEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HG_CONVERTIBLEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCONVERT_NO = base.Columns["CONVERT_NO"];
                this.columnCONVERT_NAME = base.Columns["CONVERT_NAME"];
                this.columnS_DATE = base.Columns["S_DATE"];
                this.columnE_DATE = base.Columns["E_DATE"];
                this.columnDIVIDABLE_POINT = base.Columns["DIVIDABLE_POINT"];
                this.columnCONVERT_CURRENCY = base.Columns["CONVERT_CURRENCY"];
                this.columnCREATE_USER = base.Columns["CREATE_USER"];
                this.columnCREATE_DTM = base.Columns["CREATE_DTM"];
                this.columnMODI_USER = base.Columns["MODI_USER"];
                this.columnMODI_DTM = base.Columns["MODI_DTM"];
                this.columnHG_EXCHANGE_TYPE = base.Columns["HG_EXCHANGE_TYPE"];
                this.columnCONVERT_ID = base.Columns["CONVERT_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCONVERT_NO = new global::System.Data.DataColumn("CONVERT_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONVERT_NO);
                this.columnCONVERT_NAME = new global::System.Data.DataColumn("CONVERT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONVERT_NAME);
                this.columnS_DATE = new global::System.Data.DataColumn("S_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS_DATE);
                this.columnE_DATE = new global::System.Data.DataColumn("E_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnE_DATE);
                this.columnDIVIDABLE_POINT = new global::System.Data.DataColumn("DIVIDABLE_POINT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIVIDABLE_POINT);
                this.columnCONVERT_CURRENCY = new global::System.Data.DataColumn("CONVERT_CURRENCY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONVERT_CURRENCY);
                this.columnCREATE_USER = new global::System.Data.DataColumn("CREATE_USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_USER);
                this.columnCREATE_DTM = new global::System.Data.DataColumn("CREATE_DTM", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DTM);
                this.columnMODI_USER = new global::System.Data.DataColumn("MODI_USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODI_USER);
                this.columnMODI_DTM = new global::System.Data.DataColumn("MODI_DTM", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODI_DTM);
                this.columnHG_EXCHANGE_TYPE = new global::System.Data.DataColumn("HG_EXCHANGE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHG_EXCHANGE_TYPE);
                this.columnCONVERT_ID = new global::System.Data.DataColumn("CONVERT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONVERT_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCONVERT_ID}, true));
                this.columnCONVERT_NO.AllowDBNull = false;
                this.columnCONVERT_NO.MaxLength = 32;
                this.columnCONVERT_NAME.AllowDBNull = false;
                this.columnCONVERT_NAME.MaxLength = 50;
                this.columnS_DATE.AllowDBNull = false;
                this.columnDIVIDABLE_POINT.AllowDBNull = false;
                this.columnCONVERT_CURRENCY.AllowDBNull = false;
                this.columnCREATE_USER.AllowDBNull = false;
                this.columnCREATE_USER.MaxLength = 50;
                this.columnCREATE_DTM.AllowDBNull = false;
                this.columnMODI_USER.AllowDBNull = false;
                this.columnMODI_USER.MaxLength = 50;
                this.columnMODI_DTM.AllowDBNull = false;
                this.columnHG_EXCHANGE_TYPE.MaxLength = 1;
                this.columnCONVERT_ID.AllowDBNull = false;
                this.columnCONVERT_ID.Unique = true;
                this.columnCONVERT_ID.MaxLength = 32;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_CONVERTIBLERow NewHG_CONVERTIBLERow() {
                return ((HG_CONVERTIBLERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HG_CONVERTIBLERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HG_CONVERTIBLERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HG_CONVERTIBLERowChanged != null)) {
                    this.HG_CONVERTIBLERowChanged(this, new HG_CONVERTIBLERowChangeEvent(((HG_CONVERTIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HG_CONVERTIBLERowChanging != null)) {
                    this.HG_CONVERTIBLERowChanging(this, new HG_CONVERTIBLERowChangeEvent(((HG_CONVERTIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HG_CONVERTIBLERowDeleted != null)) {
                    this.HG_CONVERTIBLERowDeleted(this, new HG_CONVERTIBLERowChangeEvent(((HG_CONVERTIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HG_CONVERTIBLERowDeleting != null)) {
                    this.HG_CONVERTIBLERowDeleting(this, new HG_CONVERTIBLERowChangeEvent(((HG_CONVERTIBLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHG_CONVERTIBLERow(HG_CONVERTIBLERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPT11_HGCONVERTIBLE_DTO ds = new OPT11_HGCONVERTIBLE_DTO();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HG_CONVERTIBLEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HG_EXCHANGE_TYPEDataTable : global::System.Data.TypedTableBase<HG_EXCHANGE_TYPERow> {
            
            private global::System.Data.DataColumn columnHG_EXCHANGE_TYPE;
            
            private global::System.Data.DataColumn columnHG_EXCHANGE_TYPE_NAME;
            
            private global::System.Data.DataColumn columnCREATE_USER;
            
            private global::System.Data.DataColumn columnCREATE_DTM;
            
            private global::System.Data.DataColumn columnMODI_USER;
            
            private global::System.Data.DataColumn columnMODI_DTM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_EXCHANGE_TYPEDataTable() {
                this.TableName = "HG_EXCHANGE_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HG_EXCHANGE_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HG_EXCHANGE_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HG_EXCHANGE_TYPEColumn {
                get {
                    return this.columnHG_EXCHANGE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HG_EXCHANGE_TYPE_NAMEColumn {
                get {
                    return this.columnHG_EXCHANGE_TYPE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_USERColumn {
                get {
                    return this.columnCREATE_USER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DTMColumn {
                get {
                    return this.columnCREATE_DTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODI_USERColumn {
                get {
                    return this.columnMODI_USER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODI_DTMColumn {
                get {
                    return this.columnMODI_DTM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_EXCHANGE_TYPERow this[int index] {
                get {
                    return ((HG_EXCHANGE_TYPERow)(this.Rows[index]));
                }
            }
            
            public event HG_EXCHANGE_TYPERowChangeEventHandler HG_EXCHANGE_TYPERowChanging;
            
            public event HG_EXCHANGE_TYPERowChangeEventHandler HG_EXCHANGE_TYPERowChanged;
            
            public event HG_EXCHANGE_TYPERowChangeEventHandler HG_EXCHANGE_TYPERowDeleting;
            
            public event HG_EXCHANGE_TYPERowChangeEventHandler HG_EXCHANGE_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHG_EXCHANGE_TYPERow(HG_EXCHANGE_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_EXCHANGE_TYPERow AddHG_EXCHANGE_TYPERow(string HG_EXCHANGE_TYPE, string HG_EXCHANGE_TYPE_NAME, string CREATE_USER, System.DateTime CREATE_DTM, string MODI_USER, System.DateTime MODI_DTM) {
                HG_EXCHANGE_TYPERow rowHG_EXCHANGE_TYPERow = ((HG_EXCHANGE_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HG_EXCHANGE_TYPE,
                        HG_EXCHANGE_TYPE_NAME,
                        CREATE_USER,
                        CREATE_DTM,
                        MODI_USER,
                        MODI_DTM};
                rowHG_EXCHANGE_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHG_EXCHANGE_TYPERow);
                return rowHG_EXCHANGE_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_EXCHANGE_TYPERow FindByHG_EXCHANGE_TYPE(string HG_EXCHANGE_TYPE) {
                return ((HG_EXCHANGE_TYPERow)(this.Rows.Find(new object[] {
                            HG_EXCHANGE_TYPE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HG_EXCHANGE_TYPEDataTable cln = ((HG_EXCHANGE_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HG_EXCHANGE_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHG_EXCHANGE_TYPE = base.Columns["HG_EXCHANGE_TYPE"];
                this.columnHG_EXCHANGE_TYPE_NAME = base.Columns["HG_EXCHANGE_TYPE_NAME"];
                this.columnCREATE_USER = base.Columns["CREATE_USER"];
                this.columnCREATE_DTM = base.Columns["CREATE_DTM"];
                this.columnMODI_USER = base.Columns["MODI_USER"];
                this.columnMODI_DTM = base.Columns["MODI_DTM"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHG_EXCHANGE_TYPE = new global::System.Data.DataColumn("HG_EXCHANGE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHG_EXCHANGE_TYPE);
                this.columnHG_EXCHANGE_TYPE_NAME = new global::System.Data.DataColumn("HG_EXCHANGE_TYPE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHG_EXCHANGE_TYPE_NAME);
                this.columnCREATE_USER = new global::System.Data.DataColumn("CREATE_USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_USER);
                this.columnCREATE_DTM = new global::System.Data.DataColumn("CREATE_DTM", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DTM);
                this.columnMODI_USER = new global::System.Data.DataColumn("MODI_USER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODI_USER);
                this.columnMODI_DTM = new global::System.Data.DataColumn("MODI_DTM", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODI_DTM);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHG_EXCHANGE_TYPE}, true));
                this.columnHG_EXCHANGE_TYPE.AllowDBNull = false;
                this.columnHG_EXCHANGE_TYPE.Unique = true;
                this.columnHG_EXCHANGE_TYPE.MaxLength = 1;
                this.columnHG_EXCHANGE_TYPE_NAME.AllowDBNull = false;
                this.columnHG_EXCHANGE_TYPE_NAME.MaxLength = 50;
                this.columnCREATE_USER.MaxLength = 50;
                this.columnMODI_USER.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_EXCHANGE_TYPERow NewHG_EXCHANGE_TYPERow() {
                return ((HG_EXCHANGE_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HG_EXCHANGE_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HG_EXCHANGE_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HG_EXCHANGE_TYPERowChanged != null)) {
                    this.HG_EXCHANGE_TYPERowChanged(this, new HG_EXCHANGE_TYPERowChangeEvent(((HG_EXCHANGE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HG_EXCHANGE_TYPERowChanging != null)) {
                    this.HG_EXCHANGE_TYPERowChanging(this, new HG_EXCHANGE_TYPERowChangeEvent(((HG_EXCHANGE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HG_EXCHANGE_TYPERowDeleted != null)) {
                    this.HG_EXCHANGE_TYPERowDeleted(this, new HG_EXCHANGE_TYPERowChangeEvent(((HG_EXCHANGE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HG_EXCHANGE_TYPERowDeleting != null)) {
                    this.HG_EXCHANGE_TYPERowDeleting(this, new HG_EXCHANGE_TYPERowChangeEvent(((HG_EXCHANGE_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHG_EXCHANGE_TYPERow(HG_EXCHANGE_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OPT11_HGCONVERTIBLE_DTO ds = new OPT11_HGCONVERTIBLE_DTO();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HG_EXCHANGE_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HG_CONVERTIBLERow : global::System.Data.DataRow {
            
            private HG_CONVERTIBLEDataTable tableHG_CONVERTIBLE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HG_CONVERTIBLERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHG_CONVERTIBLE = ((HG_CONVERTIBLEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONVERT_NO {
                get {
                    return ((string)(this[this.tableHG_CONVERTIBLE.CONVERT_NOColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.CONVERT_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONVERT_NAME {
                get {
                    return ((string)(this[this.tableHG_CONVERTIBLE.CONVERT_NAMEColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.CONVERT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime S_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableHG_CONVERTIBLE.S_DATEColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.S_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime E_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHG_CONVERTIBLE.E_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'HG_CONVERTIBLE\' 中資料行 \'E_DATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHG_CONVERTIBLE.E_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DIVIDABLE_POINT {
                get {
                    return ((decimal)(this[this.tableHG_CONVERTIBLE.DIVIDABLE_POINTColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.DIVIDABLE_POINTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CONVERT_CURRENCY {
                get {
                    return ((decimal)(this[this.tableHG_CONVERTIBLE.CONVERT_CURRENCYColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.CONVERT_CURRENCYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_USER {
                get {
                    return ((string)(this[this.tableHG_CONVERTIBLE.CREATE_USERColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.CREATE_USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DTM {
                get {
                    return ((global::System.DateTime)(this[this.tableHG_CONVERTIBLE.CREATE_DTMColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.CREATE_DTMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODI_USER {
                get {
                    return ((string)(this[this.tableHG_CONVERTIBLE.MODI_USERColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.MODI_USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MODI_DTM {
                get {
                    return ((global::System.DateTime)(this[this.tableHG_CONVERTIBLE.MODI_DTMColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.MODI_DTMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HG_EXCHANGE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableHG_CONVERTIBLE.HG_EXCHANGE_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'HG_CONVERTIBLE\' 中資料行 \'HG_EXCHANGE_TYPE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHG_CONVERTIBLE.HG_EXCHANGE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONVERT_ID {
                get {
                    return ((string)(this[this.tableHG_CONVERTIBLE.CONVERT_IDColumn]));
                }
                set {
                    this[this.tableHG_CONVERTIBLE.CONVERT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsE_DATENull() {
                return this.IsNull(this.tableHG_CONVERTIBLE.E_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetE_DATENull() {
                this[this.tableHG_CONVERTIBLE.E_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHG_EXCHANGE_TYPENull() {
                return this.IsNull(this.tableHG_CONVERTIBLE.HG_EXCHANGE_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHG_EXCHANGE_TYPENull() {
                this[this.tableHG_CONVERTIBLE.HG_EXCHANGE_TYPEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HG_EXCHANGE_TYPERow : global::System.Data.DataRow {
            
            private HG_EXCHANGE_TYPEDataTable tableHG_EXCHANGE_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HG_EXCHANGE_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHG_EXCHANGE_TYPE = ((HG_EXCHANGE_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HG_EXCHANGE_TYPE {
                get {
                    return ((string)(this[this.tableHG_EXCHANGE_TYPE.HG_EXCHANGE_TYPEColumn]));
                }
                set {
                    this[this.tableHG_EXCHANGE_TYPE.HG_EXCHANGE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HG_EXCHANGE_TYPE_NAME {
                get {
                    return ((string)(this[this.tableHG_EXCHANGE_TYPE.HG_EXCHANGE_TYPE_NAMEColumn]));
                }
                set {
                    this[this.tableHG_EXCHANGE_TYPE.HG_EXCHANGE_TYPE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATE_USER {
                get {
                    try {
                        return ((string)(this[this.tableHG_EXCHANGE_TYPE.CREATE_USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'HG_EXCHANGE_TYPE\' 中資料行 \'CREATE_USER\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHG_EXCHANGE_TYPE.CREATE_USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DTM {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHG_EXCHANGE_TYPE.CREATE_DTMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'HG_EXCHANGE_TYPE\' 中資料行 \'CREATE_DTM\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHG_EXCHANGE_TYPE.CREATE_DTMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODI_USER {
                get {
                    try {
                        return ((string)(this[this.tableHG_EXCHANGE_TYPE.MODI_USERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'HG_EXCHANGE_TYPE\' 中資料行 \'MODI_USER\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHG_EXCHANGE_TYPE.MODI_USERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MODI_DTM {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHG_EXCHANGE_TYPE.MODI_DTMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'HG_EXCHANGE_TYPE\' 中資料行 \'MODI_DTM\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableHG_EXCHANGE_TYPE.MODI_DTMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_USERNull() {
                return this.IsNull(this.tableHG_EXCHANGE_TYPE.CREATE_USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_USERNull() {
                this[this.tableHG_EXCHANGE_TYPE.CREATE_USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DTMNull() {
                return this.IsNull(this.tableHG_EXCHANGE_TYPE.CREATE_DTMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DTMNull() {
                this[this.tableHG_EXCHANGE_TYPE.CREATE_DTMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODI_USERNull() {
                return this.IsNull(this.tableHG_EXCHANGE_TYPE.MODI_USERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODI_USERNull() {
                this[this.tableHG_EXCHANGE_TYPE.MODI_USERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODI_DTMNull() {
                return this.IsNull(this.tableHG_EXCHANGE_TYPE.MODI_DTMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODI_DTMNull() {
                this[this.tableHG_EXCHANGE_TYPE.MODI_DTMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HG_CONVERTIBLERowChangeEvent : global::System.EventArgs {
            
            private HG_CONVERTIBLERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_CONVERTIBLERowChangeEvent(HG_CONVERTIBLERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_CONVERTIBLERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HG_EXCHANGE_TYPERowChangeEvent : global::System.EventArgs {
            
            private HG_EXCHANGE_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_EXCHANGE_TYPERowChangeEvent(HG_EXCHANGE_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HG_EXCHANGE_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace FET.POS.Model.DTO.OPT11_HGCONVERTIBLE_DTOTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HG_CONVERTIBLETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HG_CONVERTIBLETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HG_CONVERTIBLE";
            tableMapping.ColumnMappings.Add("CONVERT_NO", "CONVERT_NO");
            tableMapping.ColumnMappings.Add("CONVERT_NAME", "CONVERT_NAME");
            tableMapping.ColumnMappings.Add("S_DATE", "S_DATE");
            tableMapping.ColumnMappings.Add("E_DATE", "E_DATE");
            tableMapping.ColumnMappings.Add("DIVIDABLE_POINT", "DIVIDABLE_POINT");
            tableMapping.ColumnMappings.Add("CONVERT_CURRENCY", "CONVERT_CURRENCY");
            tableMapping.ColumnMappings.Add("CREATE_USER", "CREATE_USER");
            tableMapping.ColumnMappings.Add("CREATE_DTM", "CREATE_DTM");
            tableMapping.ColumnMappings.Add("MODI_USER", "MODI_USER");
            tableMapping.ColumnMappings.Add("MODI_DTM", "MODI_DTM");
            tableMapping.ColumnMappings.Add("HG_EXCHANGE_TYPE", "HG_EXCHANGE_TYPE");
            tableMapping.ColumnMappings.Add("CONVERT_ID", "CONVERT_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""WEBPOS"".""HG_CONVERTIBLE"" WHERE ((""CONVERT_NO"" = :Original_CONVERT_NO) AND (""CONVERT_NAME"" = :Original_CONVERT_NAME) AND (""S_DATE"" = :Original_S_DATE) AND ((:IsNull_E_DATE = 1 AND ""E_DATE"" IS NULL) OR (""E_DATE"" = :Original_E_DATE)) AND (""DIVIDABLE_POINT"" = :Original_DIVIDABLE_POINT) AND (""CONVERT_CURRENCY"" = :Original_CONVERT_CURRENCY) AND (""CREATE_USER"" = :Original_CREATE_USER) AND (""CREATE_DTM"" = :Original_CREATE_DTM) AND (""MODI_USER"" = :Original_MODI_USER) AND (""MODI_DTM"" = :Original_MODI_DTM) AND ((:IsNull_HG_EXCHANGE_TYPE = 1 AND ""HG_EXCHANGE_TYPE"" IS NULL) OR (""HG_EXCHANGE_TYPE"" = :Original_HG_EXCHANGE_TYPE)) AND (""CONVERT_ID"" = :Original_CONVERT_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_NO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NAME", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_S_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "S_DATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_E_DATE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "E_DATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_E_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "E_DATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DIVIDABLE_POINT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DIVIDABLE_POINT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_CURRENCY", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "CONVERT_CURRENCY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CREATE_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATE_USER", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CREATE_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATE_DTM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_MODI_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODI_USER", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_MODI_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODI_DTM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_HG_EXCHANGE_TYPE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "HG_EXCHANGE_TYPE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_HG_EXCHANGE_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "HG_EXCHANGE_TYPE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_ID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""WEBPOS"".""HG_CONVERTIBLE"" (""CONVERT_NO"", ""CONVERT_NAME"", ""S_DATE"", ""E_DATE"", ""DIVIDABLE_POINT"", ""CONVERT_CURRENCY"", ""CREATE_USER"", ""CREATE_DTM"", ""MODI_USER"", ""MODI_DTM"", ""HG_EXCHANGE_TYPE"", ""CONVERT_ID"") VALUES (:CONVERT_NO, :CONVERT_NAME, :S_DATE, :E_DATE, :DIVIDABLE_POINT, :CONVERT_CURRENCY, :CREATE_USER, :CREATE_DTM, :MODI_USER, :MODI_DTM, :HG_EXCHANGE_TYPE, :CONVERT_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_NO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("S_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "S_DATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("E_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "E_DATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DIVIDABLE_POINT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DIVIDABLE_POINT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_CURRENCY", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "CONVERT_CURRENCY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATE_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATE_USER", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATE_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATE_DTM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODI_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODI_USER", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODI_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODI_DTM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("HG_EXCHANGE_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "HG_EXCHANGE_TYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_ID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_ID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""WEBPOS"".""HG_CONVERTIBLE"" SET ""CONVERT_NO"" = :CONVERT_NO, ""CONVERT_NAME"" = :CONVERT_NAME, ""S_DATE"" = :S_DATE, ""E_DATE"" = :E_DATE, ""DIVIDABLE_POINT"" = :DIVIDABLE_POINT, ""CONVERT_CURRENCY"" = :CONVERT_CURRENCY, ""CREATE_USER"" = :CREATE_USER, ""CREATE_DTM"" = :CREATE_DTM, ""MODI_USER"" = :MODI_USER, ""MODI_DTM"" = :MODI_DTM, ""HG_EXCHANGE_TYPE"" = :HG_EXCHANGE_TYPE, ""CONVERT_ID"" = :CONVERT_ID WHERE ((""CONVERT_NO"" = :Original_CONVERT_NO) AND (""CONVERT_NAME"" = :Original_CONVERT_NAME) AND (""S_DATE"" = :Original_S_DATE) AND ((:IsNull_E_DATE = 1 AND ""E_DATE"" IS NULL) OR (""E_DATE"" = :Original_E_DATE)) AND (""DIVIDABLE_POINT"" = :Original_DIVIDABLE_POINT) AND (""CONVERT_CURRENCY"" = :Original_CONVERT_CURRENCY) AND (""CREATE_USER"" = :Original_CREATE_USER) AND (""CREATE_DTM"" = :Original_CREATE_DTM) AND (""MODI_USER"" = :Original_MODI_USER) AND (""MODI_DTM"" = :Original_MODI_DTM) AND ((:IsNull_HG_EXCHANGE_TYPE = 1 AND ""HG_EXCHANGE_TYPE"" IS NULL) OR (""HG_EXCHANGE_TYPE"" = :Original_HG_EXCHANGE_TYPE)) AND (""CONVERT_ID"" = :Original_CONVERT_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_NO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("S_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "S_DATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("E_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "E_DATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DIVIDABLE_POINT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DIVIDABLE_POINT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_CURRENCY", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "CONVERT_CURRENCY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATE_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATE_USER", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATE_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATE_DTM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODI_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODI_USER", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODI_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODI_DTM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("HG_EXCHANGE_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "HG_EXCHANGE_TYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONVERT_ID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_ID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_NO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_NAME", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_S_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "S_DATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_E_DATE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "E_DATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_E_DATE", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "E_DATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_DIVIDABLE_POINT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DIVIDABLE_POINT", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_CURRENCY", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "CONVERT_CURRENCY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CREATE_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATE_USER", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CREATE_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATE_DTM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_MODI_USER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODI_USER", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_MODI_DTM", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODI_DTM", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_HG_EXCHANGE_TYPE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "HG_EXCHANGE_TYPE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_HG_EXCHANGE_TYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "HG_EXCHANGE_TYPE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CONVERT_ID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONVERT_ID", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::FET.POS.Model.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CONVERT_NO, CONVERT_NAME, S_DATE, E_DATE, DIVIDABLE_POINT, CONVERT_CURRENC" +
                "Y, CREATE_USER, CREATE_DTM, MODI_USER, MODI_DTM, HG_EXCHANGE_TYPE, CONVERT_ID FR" +
                "OM WEBPOS.HG_CONVERTIBLE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(OPT11_HGCONVERTIBLE_DTO.HG_CONVERTIBLEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual OPT11_HGCONVERTIBLE_DTO.HG_CONVERTIBLEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            OPT11_HGCONVERTIBLE_DTO.HG_CONVERTIBLEDataTable dataTable = new OPT11_HGCONVERTIBLE_DTO.HG_CONVERTIBLEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPT11_HGCONVERTIBLE_DTO.HG_CONVERTIBLEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(OPT11_HGCONVERTIBLE_DTO dataSet) {
            return this.Adapter.Update(dataSet, "HG_CONVERTIBLE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CONVERT_NO, string Original_CONVERT_NAME, System.DateTime Original_S_DATE, global::System.Nullable<global::System.DateTime> Original_E_DATE, decimal Original_DIVIDABLE_POINT, decimal Original_CONVERT_CURRENCY, string Original_CREATE_USER, System.DateTime Original_CREATE_DTM, string Original_MODI_USER, System.DateTime Original_MODI_DTM, string Original_HG_EXCHANGE_TYPE, string Original_CONVERT_ID) {
            if ((Original_CONVERT_NO == null)) {
                throw new global::System.ArgumentNullException("Original_CONVERT_NO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CONVERT_NO));
            }
            if ((Original_CONVERT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_CONVERT_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CONVERT_NAME));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_S_DATE));
            if ((Original_E_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_E_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_DIVIDABLE_POINT));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_CONVERT_CURRENCY));
            if ((Original_CREATE_USER == null)) {
                throw new global::System.ArgumentNullException("Original_CREATE_USER");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_CREATE_USER));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_CREATE_DTM));
            if ((Original_MODI_USER == null)) {
                throw new global::System.ArgumentNullException("Original_MODI_USER");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_MODI_USER));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_MODI_DTM));
            if ((Original_HG_EXCHANGE_TYPE == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_HG_EXCHANGE_TYPE));
            }
            if ((Original_CONVERT_ID == null)) {
                throw new global::System.ArgumentNullException("Original_CONVERT_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_CONVERT_ID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CONVERT_NO, string CONVERT_NAME, System.DateTime S_DATE, global::System.Nullable<global::System.DateTime> E_DATE, decimal DIVIDABLE_POINT, decimal CONVERT_CURRENCY, string CREATE_USER, System.DateTime CREATE_DTM, string MODI_USER, System.DateTime MODI_DTM, string HG_EXCHANGE_TYPE, string CONVERT_ID) {
            if ((CONVERT_NO == null)) {
                throw new global::System.ArgumentNullException("CONVERT_NO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CONVERT_NO));
            }
            if ((CONVERT_NAME == null)) {
                throw new global::System.ArgumentNullException("CONVERT_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CONVERT_NAME));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(S_DATE));
            if ((E_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(E_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(DIVIDABLE_POINT));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(CONVERT_CURRENCY));
            if ((CREATE_USER == null)) {
                throw new global::System.ArgumentNullException("CREATE_USER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CREATE_USER));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(CREATE_DTM));
            if ((MODI_USER == null)) {
                throw new global::System.ArgumentNullException("MODI_USER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(MODI_USER));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(MODI_DTM));
            if ((HG_EXCHANGE_TYPE == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(HG_EXCHANGE_TYPE));
            }
            if ((CONVERT_ID == null)) {
                throw new global::System.ArgumentNullException("CONVERT_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(CONVERT_ID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CONVERT_NO, 
                    string CONVERT_NAME, 
                    System.DateTime S_DATE, 
                    global::System.Nullable<global::System.DateTime> E_DATE, 
                    decimal DIVIDABLE_POINT, 
                    decimal CONVERT_CURRENCY, 
                    string CREATE_USER, 
                    System.DateTime CREATE_DTM, 
                    string MODI_USER, 
                    System.DateTime MODI_DTM, 
                    string HG_EXCHANGE_TYPE, 
                    string CONVERT_ID, 
                    string Original_CONVERT_NO, 
                    string Original_CONVERT_NAME, 
                    System.DateTime Original_S_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_E_DATE, 
                    decimal Original_DIVIDABLE_POINT, 
                    decimal Original_CONVERT_CURRENCY, 
                    string Original_CREATE_USER, 
                    System.DateTime Original_CREATE_DTM, 
                    string Original_MODI_USER, 
                    System.DateTime Original_MODI_DTM, 
                    string Original_HG_EXCHANGE_TYPE, 
                    string Original_CONVERT_ID) {
            if ((CONVERT_NO == null)) {
                throw new global::System.ArgumentNullException("CONVERT_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CONVERT_NO));
            }
            if ((CONVERT_NAME == null)) {
                throw new global::System.ArgumentNullException("CONVERT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CONVERT_NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(S_DATE));
            if ((E_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(E_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(DIVIDABLE_POINT));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(CONVERT_CURRENCY));
            if ((CREATE_USER == null)) {
                throw new global::System.ArgumentNullException("CREATE_USER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CREATE_USER));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(CREATE_DTM));
            if ((MODI_USER == null)) {
                throw new global::System.ArgumentNullException("MODI_USER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(MODI_USER));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(MODI_DTM));
            if ((HG_EXCHANGE_TYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(HG_EXCHANGE_TYPE));
            }
            if ((CONVERT_ID == null)) {
                throw new global::System.ArgumentNullException("CONVERT_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(CONVERT_ID));
            }
            if ((Original_CONVERT_NO == null)) {
                throw new global::System.ArgumentNullException("Original_CONVERT_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_CONVERT_NO));
            }
            if ((Original_CONVERT_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_CONVERT_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_CONVERT_NAME));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_S_DATE));
            if ((Original_E_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_E_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_DIVIDABLE_POINT));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_CONVERT_CURRENCY));
            if ((Original_CREATE_USER == null)) {
                throw new global::System.ArgumentNullException("Original_CREATE_USER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_CREATE_USER));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_CREATE_DTM));
            if ((Original_MODI_USER == null)) {
                throw new global::System.ArgumentNullException("Original_MODI_USER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_MODI_USER));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_MODI_DTM));
            if ((Original_HG_EXCHANGE_TYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_HG_EXCHANGE_TYPE));
            }
            if ((Original_CONVERT_ID == null)) {
                throw new global::System.ArgumentNullException("Original_CONVERT_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_CONVERT_ID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CONVERT_NO, 
                    string CONVERT_NAME, 
                    System.DateTime S_DATE, 
                    global::System.Nullable<global::System.DateTime> E_DATE, 
                    decimal DIVIDABLE_POINT, 
                    decimal CONVERT_CURRENCY, 
                    string CREATE_USER, 
                    System.DateTime CREATE_DTM, 
                    string MODI_USER, 
                    System.DateTime MODI_DTM, 
                    string HG_EXCHANGE_TYPE, 
                    string Original_CONVERT_NO, 
                    string Original_CONVERT_NAME, 
                    System.DateTime Original_S_DATE, 
                    global::System.Nullable<global::System.DateTime> Original_E_DATE, 
                    decimal Original_DIVIDABLE_POINT, 
                    decimal Original_CONVERT_CURRENCY, 
                    string Original_CREATE_USER, 
                    System.DateTime Original_CREATE_DTM, 
                    string Original_MODI_USER, 
                    System.DateTime Original_MODI_DTM, 
                    string Original_HG_EXCHANGE_TYPE, 
                    string Original_CONVERT_ID) {
            return this.Update(CONVERT_NO, CONVERT_NAME, S_DATE, E_DATE, DIVIDABLE_POINT, CONVERT_CURRENCY, CREATE_USER, CREATE_DTM, MODI_USER, MODI_DTM, HG_EXCHANGE_TYPE, Original_CONVERT_ID, Original_CONVERT_NO, Original_CONVERT_NAME, Original_S_DATE, Original_E_DATE, Original_DIVIDABLE_POINT, Original_CONVERT_CURRENCY, Original_CREATE_USER, Original_CREATE_DTM, Original_MODI_USER, Original_MODI_DTM, Original_HG_EXCHANGE_TYPE, Original_CONVERT_ID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private HG_CONVERTIBLETableAdapter _hG_CONVERTIBLETableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HG_CONVERTIBLETableAdapter HG_CONVERTIBLETableAdapter {
            get {
                return this._hG_CONVERTIBLETableAdapter;
            }
            set {
                this._hG_CONVERTIBLETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._hG_CONVERTIBLETableAdapter != null) 
                            && (this._hG_CONVERTIBLETableAdapter.Connection != null))) {
                    return this._hG_CONVERTIBLETableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._hG_CONVERTIBLETableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(OPT11_HGCONVERTIBLE_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._hG_CONVERTIBLETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HG_CONVERTIBLE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._hG_CONVERTIBLETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(OPT11_HGCONVERTIBLE_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._hG_CONVERTIBLETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HG_CONVERTIBLE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._hG_CONVERTIBLETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(OPT11_HGCONVERTIBLE_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._hG_CONVERTIBLETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HG_CONVERTIBLE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._hG_CONVERTIBLETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(OPT11_HGCONVERTIBLE_DTO dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._hG_CONVERTIBLETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._hG_CONVERTIBLETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 未包含連接資訊。請將每個 TableAdapterManager 的 TableAdapter 屬性設成有效的 Table" +
                        "Adapter 執行個體。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("無法開始交易。目前的資料連接不支援交易或是目前的狀態不允許交易開始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._hG_CONVERTIBLETableAdapter != null)) {
                    revertConnections.Add(this._hG_CONVERTIBLETableAdapter, this._hG_CONVERTIBLETableAdapter.Connection);
                    this._hG_CONVERTIBLETableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._hG_CONVERTIBLETableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._hG_CONVERTIBLETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._hG_CONVERTIBLETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._hG_CONVERTIBLETableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._hG_CONVERTIBLETableAdapter != null)) {
                    this._hG_CONVERTIBLETableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._hG_CONVERTIBLETableAdapter]));
                    this._hG_CONVERTIBLETableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591