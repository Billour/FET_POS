//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.3053
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FET.POS.Model.DTO.ConvertApp {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EMPLOYEE_CONVERT_DTO")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EMPLOYEE_CONVERT_DTO : global::System.Data.DataSet {
        
        private VIEMEMBERDataTable tableVIEMEMBER;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EMPLOYEE_CONVERT_DTO() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EMPLOYEE_CONVERT_DTO(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["VIEMEMBER"] != null)) {
                    base.Tables.Add(new VIEMEMBERDataTable(ds.Tables["VIEMEMBER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VIEMEMBERDataTable VIEMEMBER {
            get {
                return this.tableVIEMEMBER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EMPLOYEE_CONVERT_DTO cln = ((EMPLOYEE_CONVERT_DTO)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["VIEMEMBER"] != null)) {
                    base.Tables.Add(new VIEMEMBERDataTable(ds.Tables["VIEMEMBER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableVIEMEMBER = ((VIEMEMBERDataTable)(base.Tables["VIEMEMBER"]));
            if ((initTable == true)) {
                if ((this.tableVIEMEMBER != null)) {
                    this.tableVIEMEMBER.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EMPLOYEE_CONVERT_DTO";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EMPLOYEE_CONVERT_DTO.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableVIEMEMBER = new VIEMEMBERDataTable();
            base.Tables.Add(this.tableVIEMEMBER);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVIEMEMBER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EMPLOYEE_CONVERT_DTO ds = new EMPLOYEE_CONVERT_DTO();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void VIEMEMBERRowChangeEventHandler(object sender, VIEMEMBERRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VIEMEMBERDataTable : global::System.Data.TypedTableBase<VIEMEMBERRow> {
            
            private global::System.Data.DataColumn columnEMPNO;
            
            private global::System.Data.DataColumn columnDEPTCODE;
            
            private global::System.Data.DataColumn columnEMPNAME;
            
            private global::System.Data.DataColumn columnEMPFNAME;
            
            private global::System.Data.DataColumn columnEMPLNAME;
            
            private global::System.Data.DataColumn columnENGNAME;
            
            private global::System.Data.DataColumn columnENGFNAME;
            
            private global::System.Data.DataColumn columnENGLNAME;
            
            private global::System.Data.DataColumn columnALIASNAME;
            
            private global::System.Data.DataColumn columnCELLULAR;
            
            private global::System.Data.DataColumn columnEXTENSION;
            
            private global::System.Data.DataColumn columnFAXNO;
            
            private global::System.Data.DataColumn columnMVPN;
            
            private global::System.Data.DataColumn columnEMAIL;
            
            private global::System.Data.DataColumn columnTITLE;
            
            private global::System.Data.DataColumn columnTITLENAME;
            
            private global::System.Data.DataColumn columnTITLECLASS;
            
            private global::System.Data.DataColumn columnCOMPCODE;
            
            private global::System.Data.DataColumn columnCOMPNAME;
            
            private global::System.Data.DataColumn columnBUSNSCODE;
            
            private global::System.Data.DataColumn columnBUSNSNAME;
            
            private global::System.Data.DataColumn columnREGION;
            
            private global::System.Data.DataColumn columnREGIONNAME;
            
            private global::System.Data.DataColumn columnCOSTCENTER;
            
            private global::System.Data.DataColumn columnENTDATE;
            
            private global::System.Data.DataColumn columnOFFDATE;
            
            private global::System.Data.DataColumn columnCONTRACTSDATE;
            
            private global::System.Data.DataColumn columnCONTRACTEDATE;
            
            private global::System.Data.DataColumn columnSEX;
            
            private global::System.Data.DataColumn columnBIRTHDATE;
            
            private global::System.Data.DataColumn columnLOCATIONCODE;
            
            private global::System.Data.DataColumn columnLOCATIONNAME;
            
            private global::System.Data.DataColumn columnFINALDATE;
            
            private global::System.Data.DataColumn columnSTARTDATE;
            
            private global::System.Data.DataColumn columnEMPTYPE;
            
            private global::System.Data.DataColumn columnOPID;
            
            private global::System.Data.DataColumn columnLOGINID;
            
            private global::System.Data.DataColumn columnREPFLG;
            
            private global::System.Data.DataColumn columnHIRECODE;
            
            private global::System.Data.DataColumn columnUPDDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VIEMEMBERDataTable() {
                this.TableName = "VIEMEMBER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VIEMEMBERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VIEMEMBERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMPNOColumn {
                get {
                    return this.columnEMPNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPTCODEColumn {
                get {
                    return this.columnDEPTCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMPNAMEColumn {
                get {
                    return this.columnEMPNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMPFNAMEColumn {
                get {
                    return this.columnEMPFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMPLNAMEColumn {
                get {
                    return this.columnEMPLNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENGNAMEColumn {
                get {
                    return this.columnENGNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENGFNAMEColumn {
                get {
                    return this.columnENGFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENGLNAMEColumn {
                get {
                    return this.columnENGLNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ALIASNAMEColumn {
                get {
                    return this.columnALIASNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CELLULARColumn {
                get {
                    return this.columnCELLULAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTENSIONColumn {
                get {
                    return this.columnEXTENSION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FAXNOColumn {
                get {
                    return this.columnFAXNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MVPNColumn {
                get {
                    return this.columnMVPN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TITLEColumn {
                get {
                    return this.columnTITLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TITLENAMEColumn {
                get {
                    return this.columnTITLENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TITLECLASSColumn {
                get {
                    return this.columnTITLECLASS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPCODEColumn {
                get {
                    return this.columnCOMPCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPNAMEColumn {
                get {
                    return this.columnCOMPNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSNSCODEColumn {
                get {
                    return this.columnBUSNSCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSNSNAMEColumn {
                get {
                    return this.columnBUSNSNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGIONColumn {
                get {
                    return this.columnREGION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGIONNAMEColumn {
                get {
                    return this.columnREGIONNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COSTCENTERColumn {
                get {
                    return this.columnCOSTCENTER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENTDATEColumn {
                get {
                    return this.columnENTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OFFDATEColumn {
                get {
                    return this.columnOFFDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTRACTSDATEColumn {
                get {
                    return this.columnCONTRACTSDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTRACTEDATEColumn {
                get {
                    return this.columnCONTRACTEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SEXColumn {
                get {
                    return this.columnSEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BIRTHDATEColumn {
                get {
                    return this.columnBIRTHDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCATIONCODEColumn {
                get {
                    return this.columnLOCATIONCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCATIONNAMEColumn {
                get {
                    return this.columnLOCATIONNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINALDATEColumn {
                get {
                    return this.columnFINALDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STARTDATEColumn {
                get {
                    return this.columnSTARTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMPTYPEColumn {
                get {
                    return this.columnEMPTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPIDColumn {
                get {
                    return this.columnOPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOGINIDColumn {
                get {
                    return this.columnLOGINID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REPFLGColumn {
                get {
                    return this.columnREPFLG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HIRECODEColumn {
                get {
                    return this.columnHIRECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDDATEColumn {
                get {
                    return this.columnUPDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VIEMEMBERRow this[int index] {
                get {
                    return ((VIEMEMBERRow)(this.Rows[index]));
                }
            }
            
            public event VIEMEMBERRowChangeEventHandler VIEMEMBERRowChanging;
            
            public event VIEMEMBERRowChangeEventHandler VIEMEMBERRowChanged;
            
            public event VIEMEMBERRowChangeEventHandler VIEMEMBERRowDeleting;
            
            public event VIEMEMBERRowChangeEventHandler VIEMEMBERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVIEMEMBERRow(VIEMEMBERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VIEMEMBERRow AddVIEMEMBERRow(
                        string EMPNO, 
                        string DEPTCODE, 
                        string EMPNAME, 
                        string EMPFNAME, 
                        string EMPLNAME, 
                        string ENGNAME, 
                        string ENGFNAME, 
                        string ENGLNAME, 
                        string ALIASNAME, 
                        string CELLULAR, 
                        string EXTENSION, 
                        string FAXNO, 
                        string MVPN, 
                        string EMAIL, 
                        string TITLE, 
                        string TITLENAME, 
                        string TITLECLASS, 
                        string COMPCODE, 
                        string COMPNAME, 
                        string BUSNSCODE, 
                        string BUSNSNAME, 
                        string REGION, 
                        string REGIONNAME, 
                        string COSTCENTER, 
                        string ENTDATE, 
                        string OFFDATE, 
                        string CONTRACTSDATE, 
                        string CONTRACTEDATE, 
                        string SEX, 
                        string BIRTHDATE, 
                        string LOCATIONCODE, 
                        string LOCATIONNAME, 
                        string FINALDATE, 
                        string STARTDATE, 
                        string EMPTYPE, 
                        string OPID, 
                        string LOGINID, 
                        string REPFLG, 
                        string HIRECODE, 
                        string UPDDATE) {
                VIEMEMBERRow rowVIEMEMBERRow = ((VIEMEMBERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EMPNO,
                        DEPTCODE,
                        EMPNAME,
                        EMPFNAME,
                        EMPLNAME,
                        ENGNAME,
                        ENGFNAME,
                        ENGLNAME,
                        ALIASNAME,
                        CELLULAR,
                        EXTENSION,
                        FAXNO,
                        MVPN,
                        EMAIL,
                        TITLE,
                        TITLENAME,
                        TITLECLASS,
                        COMPCODE,
                        COMPNAME,
                        BUSNSCODE,
                        BUSNSNAME,
                        REGION,
                        REGIONNAME,
                        COSTCENTER,
                        ENTDATE,
                        OFFDATE,
                        CONTRACTSDATE,
                        CONTRACTEDATE,
                        SEX,
                        BIRTHDATE,
                        LOCATIONCODE,
                        LOCATIONNAME,
                        FINALDATE,
                        STARTDATE,
                        EMPTYPE,
                        OPID,
                        LOGINID,
                        REPFLG,
                        HIRECODE,
                        UPDDATE};
                rowVIEMEMBERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVIEMEMBERRow);
                return rowVIEMEMBERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VIEMEMBERDataTable cln = ((VIEMEMBERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VIEMEMBERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEMPNO = base.Columns["EMPNO"];
                this.columnDEPTCODE = base.Columns["DEPTCODE"];
                this.columnEMPNAME = base.Columns["EMPNAME"];
                this.columnEMPFNAME = base.Columns["EMPFNAME"];
                this.columnEMPLNAME = base.Columns["EMPLNAME"];
                this.columnENGNAME = base.Columns["ENGNAME"];
                this.columnENGFNAME = base.Columns["ENGFNAME"];
                this.columnENGLNAME = base.Columns["ENGLNAME"];
                this.columnALIASNAME = base.Columns["ALIASNAME"];
                this.columnCELLULAR = base.Columns["CELLULAR"];
                this.columnEXTENSION = base.Columns["EXTENSION"];
                this.columnFAXNO = base.Columns["FAXNO"];
                this.columnMVPN = base.Columns["MVPN"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnTITLE = base.Columns["TITLE"];
                this.columnTITLENAME = base.Columns["TITLENAME"];
                this.columnTITLECLASS = base.Columns["TITLECLASS"];
                this.columnCOMPCODE = base.Columns["COMPCODE"];
                this.columnCOMPNAME = base.Columns["COMPNAME"];
                this.columnBUSNSCODE = base.Columns["BUSNSCODE"];
                this.columnBUSNSNAME = base.Columns["BUSNSNAME"];
                this.columnREGION = base.Columns["REGION"];
                this.columnREGIONNAME = base.Columns["REGIONNAME"];
                this.columnCOSTCENTER = base.Columns["COSTCENTER"];
                this.columnENTDATE = base.Columns["ENTDATE"];
                this.columnOFFDATE = base.Columns["OFFDATE"];
                this.columnCONTRACTSDATE = base.Columns["CONTRACTSDATE"];
                this.columnCONTRACTEDATE = base.Columns["CONTRACTEDATE"];
                this.columnSEX = base.Columns["SEX"];
                this.columnBIRTHDATE = base.Columns["BIRTHDATE"];
                this.columnLOCATIONCODE = base.Columns["LOCATIONCODE"];
                this.columnLOCATIONNAME = base.Columns["LOCATIONNAME"];
                this.columnFINALDATE = base.Columns["FINALDATE"];
                this.columnSTARTDATE = base.Columns["STARTDATE"];
                this.columnEMPTYPE = base.Columns["EMPTYPE"];
                this.columnOPID = base.Columns["OPID"];
                this.columnLOGINID = base.Columns["LOGINID"];
                this.columnREPFLG = base.Columns["REPFLG"];
                this.columnHIRECODE = base.Columns["HIRECODE"];
                this.columnUPDDATE = base.Columns["UPDDATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEMPNO = new global::System.Data.DataColumn("EMPNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPNO);
                this.columnDEPTCODE = new global::System.Data.DataColumn("DEPTCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPTCODE);
                this.columnEMPNAME = new global::System.Data.DataColumn("EMPNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPNAME);
                this.columnEMPFNAME = new global::System.Data.DataColumn("EMPFNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPFNAME);
                this.columnEMPLNAME = new global::System.Data.DataColumn("EMPLNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPLNAME);
                this.columnENGNAME = new global::System.Data.DataColumn("ENGNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENGNAME);
                this.columnENGFNAME = new global::System.Data.DataColumn("ENGFNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENGFNAME);
                this.columnENGLNAME = new global::System.Data.DataColumn("ENGLNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENGLNAME);
                this.columnALIASNAME = new global::System.Data.DataColumn("ALIASNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnALIASNAME);
                this.columnCELLULAR = new global::System.Data.DataColumn("CELLULAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCELLULAR);
                this.columnEXTENSION = new global::System.Data.DataColumn("EXTENSION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTENSION);
                this.columnFAXNO = new global::System.Data.DataColumn("FAXNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAXNO);
                this.columnMVPN = new global::System.Data.DataColumn("MVPN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMVPN);
                this.columnEMAIL = new global::System.Data.DataColumn("EMAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnTITLE = new global::System.Data.DataColumn("TITLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTITLE);
                this.columnTITLENAME = new global::System.Data.DataColumn("TITLENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTITLENAME);
                this.columnTITLECLASS = new global::System.Data.DataColumn("TITLECLASS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTITLECLASS);
                this.columnCOMPCODE = new global::System.Data.DataColumn("COMPCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPCODE);
                this.columnCOMPNAME = new global::System.Data.DataColumn("COMPNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPNAME);
                this.columnBUSNSCODE = new global::System.Data.DataColumn("BUSNSCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUSNSCODE);
                this.columnBUSNSNAME = new global::System.Data.DataColumn("BUSNSNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUSNSNAME);
                this.columnREGION = new global::System.Data.DataColumn("REGION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGION);
                this.columnREGIONNAME = new global::System.Data.DataColumn("REGIONNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGIONNAME);
                this.columnCOSTCENTER = new global::System.Data.DataColumn("COSTCENTER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOSTCENTER);
                this.columnENTDATE = new global::System.Data.DataColumn("ENTDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENTDATE);
                this.columnOFFDATE = new global::System.Data.DataColumn("OFFDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOFFDATE);
                this.columnCONTRACTSDATE = new global::System.Data.DataColumn("CONTRACTSDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACTSDATE);
                this.columnCONTRACTEDATE = new global::System.Data.DataColumn("CONTRACTEDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTRACTEDATE);
                this.columnSEX = new global::System.Data.DataColumn("SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEX);
                this.columnBIRTHDATE = new global::System.Data.DataColumn("BIRTHDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBIRTHDATE);
                this.columnLOCATIONCODE = new global::System.Data.DataColumn("LOCATIONCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCATIONCODE);
                this.columnLOCATIONNAME = new global::System.Data.DataColumn("LOCATIONNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCATIONNAME);
                this.columnFINALDATE = new global::System.Data.DataColumn("FINALDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINALDATE);
                this.columnSTARTDATE = new global::System.Data.DataColumn("STARTDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTARTDATE);
                this.columnEMPTYPE = new global::System.Data.DataColumn("EMPTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMPTYPE);
                this.columnOPID = new global::System.Data.DataColumn("OPID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPID);
                this.columnLOGINID = new global::System.Data.DataColumn("LOGINID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGINID);
                this.columnREPFLG = new global::System.Data.DataColumn("REPFLG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREPFLG);
                this.columnHIRECODE = new global::System.Data.DataColumn("HIRECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHIRECODE);
                this.columnUPDDATE = new global::System.Data.DataColumn("UPDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDDATE);
                this.columnEMPNO.MaxLength = 10;
                this.columnDEPTCODE.MaxLength = 30;
                this.columnEMPNAME.MaxLength = 16;
                this.columnEMPFNAME.MaxLength = 10;
                this.columnEMPLNAME.MaxLength = 10;
                this.columnENGNAME.MaxLength = 32;
                this.columnENGFNAME.MaxLength = 32;
                this.columnENGLNAME.MaxLength = 32;
                this.columnALIASNAME.MaxLength = 32;
                this.columnCELLULAR.MaxLength = 20;
                this.columnEXTENSION.MaxLength = 20;
                this.columnFAXNO.MaxLength = 20;
                this.columnMVPN.MaxLength = 6;
                this.columnEMAIL.MaxLength = 50;
                this.columnTITLE.MaxLength = 6;
                this.columnTITLENAME.MaxLength = 100;
                this.columnTITLECLASS.MaxLength = 4;
                this.columnCOMPCODE.MaxLength = 2;
                this.columnCOMPNAME.MaxLength = 100;
                this.columnBUSNSCODE.MaxLength = 3;
                this.columnBUSNSNAME.MaxLength = 100;
                this.columnREGION.MaxLength = 4;
                this.columnREGIONNAME.MaxLength = 100;
                this.columnCOSTCENTER.MaxLength = 30;
                this.columnENTDATE.MaxLength = 10;
                this.columnOFFDATE.MaxLength = 10;
                this.columnCONTRACTSDATE.MaxLength = 10;
                this.columnCONTRACTEDATE.MaxLength = 10;
                this.columnSEX.MaxLength = 1;
                this.columnBIRTHDATE.MaxLength = 10;
                this.columnLOCATIONCODE.MaxLength = 3;
                this.columnLOCATIONNAME.MaxLength = 50;
                this.columnFINALDATE.MaxLength = 10;
                this.columnSTARTDATE.MaxLength = 10;
                this.columnEMPTYPE.MaxLength = 1;
                this.columnOPID.MaxLength = 10;
                this.columnLOGINID.MaxLength = 10;
                this.columnREPFLG.MaxLength = 1;
                this.columnHIRECODE.MaxLength = 3;
                this.columnUPDDATE.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VIEMEMBERRow NewVIEMEMBERRow() {
                return ((VIEMEMBERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VIEMEMBERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VIEMEMBERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VIEMEMBERRowChanged != null)) {
                    this.VIEMEMBERRowChanged(this, new VIEMEMBERRowChangeEvent(((VIEMEMBERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VIEMEMBERRowChanging != null)) {
                    this.VIEMEMBERRowChanging(this, new VIEMEMBERRowChangeEvent(((VIEMEMBERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VIEMEMBERRowDeleted != null)) {
                    this.VIEMEMBERRowDeleted(this, new VIEMEMBERRowChangeEvent(((VIEMEMBERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VIEMEMBERRowDeleting != null)) {
                    this.VIEMEMBERRowDeleting(this, new VIEMEMBERRowChangeEvent(((VIEMEMBERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVIEMEMBERRow(VIEMEMBERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EMPLOYEE_CONVERT_DTO ds = new EMPLOYEE_CONVERT_DTO();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VIEMEMBERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VIEMEMBERRow : global::System.Data.DataRow {
            
            private VIEMEMBERDataTable tableVIEMEMBER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VIEMEMBERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVIEMEMBER = ((VIEMEMBERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMPNO {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.EMPNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'EMPNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.EMPNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPTCODE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.DEPTCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'DEPTCODE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.DEPTCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMPNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.EMPNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'EMPNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.EMPNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMPFNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.EMPFNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'EMPFNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.EMPFNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMPLNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.EMPLNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'EMPLNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.EMPLNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENGNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.ENGNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'ENGNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.ENGNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENGFNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.ENGFNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'ENGFNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.ENGFNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENGLNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.ENGLNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'ENGLNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.ENGLNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ALIASNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.ALIASNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'ALIASNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.ALIASNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CELLULAR {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.CELLULARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'CELLULAR\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.CELLULARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTENSION {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.EXTENSIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'EXTENSION\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.EXTENSIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FAXNO {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.FAXNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'FAXNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.FAXNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MVPN {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.MVPNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'MVPN\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.MVPNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.EMAILColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'EMAIL\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.EMAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TITLE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.TITLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'TITLE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.TITLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TITLENAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.TITLENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'TITLENAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.TITLENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TITLECLASS {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.TITLECLASSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'TITLECLASS\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.TITLECLASSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPCODE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.COMPCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'COMPCODE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.COMPCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.COMPNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'COMPNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.COMPNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUSNSCODE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.BUSNSCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'BUSNSCODE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.BUSNSCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUSNSNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.BUSNSNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'BUSNSNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.BUSNSNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGION {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.REGIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'REGION\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.REGIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGIONNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.REGIONNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'REGIONNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.REGIONNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COSTCENTER {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.COSTCENTERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'COSTCENTER\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.COSTCENTERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENTDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.ENTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'ENTDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.ENTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OFFDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.OFFDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'OFFDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.OFFDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTRACTSDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.CONTRACTSDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'CONTRACTSDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.CONTRACTSDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTRACTEDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.CONTRACTEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'CONTRACTEDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.CONTRACTEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SEX {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'SEX\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BIRTHDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.BIRTHDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'BIRTHDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.BIRTHDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCATIONCODE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.LOCATIONCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'LOCATIONCODE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.LOCATIONCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCATIONNAME {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.LOCATIONNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'LOCATIONNAME\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.LOCATIONNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINALDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.FINALDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'FINALDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.FINALDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STARTDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.STARTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'STARTDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.STARTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMPTYPE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.EMPTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'EMPTYPE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.EMPTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OPID {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.OPIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'OPID\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.OPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOGINID {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.LOGINIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'LOGINID\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.LOGINIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REPFLG {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.REPFLGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'REPFLG\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.REPFLGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HIRECODE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.HIRECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'HIRECODE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.HIRECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDDATE {
                get {
                    try {
                        return ((string)(this[this.tableVIEMEMBER.UPDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'VIEMEMBER\' 中資料行 \'UPDDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVIEMEMBER.UPDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMPNONull() {
                return this.IsNull(this.tableVIEMEMBER.EMPNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMPNONull() {
                this[this.tableVIEMEMBER.EMPNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPTCODENull() {
                return this.IsNull(this.tableVIEMEMBER.DEPTCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPTCODENull() {
                this[this.tableVIEMEMBER.DEPTCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMPNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.EMPNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMPNAMENull() {
                this[this.tableVIEMEMBER.EMPNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMPFNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.EMPFNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMPFNAMENull() {
                this[this.tableVIEMEMBER.EMPFNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMPLNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.EMPLNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMPLNAMENull() {
                this[this.tableVIEMEMBER.EMPLNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENGNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.ENGNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENGNAMENull() {
                this[this.tableVIEMEMBER.ENGNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENGFNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.ENGFNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENGFNAMENull() {
                this[this.tableVIEMEMBER.ENGFNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENGLNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.ENGLNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENGLNAMENull() {
                this[this.tableVIEMEMBER.ENGLNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsALIASNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.ALIASNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetALIASNAMENull() {
                this[this.tableVIEMEMBER.ALIASNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCELLULARNull() {
                return this.IsNull(this.tableVIEMEMBER.CELLULARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCELLULARNull() {
                this[this.tableVIEMEMBER.CELLULARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTENSIONNull() {
                return this.IsNull(this.tableVIEMEMBER.EXTENSIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTENSIONNull() {
                this[this.tableVIEMEMBER.EXTENSIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFAXNONull() {
                return this.IsNull(this.tableVIEMEMBER.FAXNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFAXNONull() {
                this[this.tableVIEMEMBER.FAXNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMVPNNull() {
                return this.IsNull(this.tableVIEMEMBER.MVPNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMVPNNull() {
                this[this.tableVIEMEMBER.MVPNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.tableVIEMEMBER.EMAILColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.tableVIEMEMBER.EMAILColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTITLENull() {
                return this.IsNull(this.tableVIEMEMBER.TITLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTITLENull() {
                this[this.tableVIEMEMBER.TITLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTITLENAMENull() {
                return this.IsNull(this.tableVIEMEMBER.TITLENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTITLENAMENull() {
                this[this.tableVIEMEMBER.TITLENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTITLECLASSNull() {
                return this.IsNull(this.tableVIEMEMBER.TITLECLASSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTITLECLASSNull() {
                this[this.tableVIEMEMBER.TITLECLASSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPCODENull() {
                return this.IsNull(this.tableVIEMEMBER.COMPCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPCODENull() {
                this[this.tableVIEMEMBER.COMPCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.COMPNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPNAMENull() {
                this[this.tableVIEMEMBER.COMPNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUSNSCODENull() {
                return this.IsNull(this.tableVIEMEMBER.BUSNSCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUSNSCODENull() {
                this[this.tableVIEMEMBER.BUSNSCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUSNSNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.BUSNSNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUSNSNAMENull() {
                this[this.tableVIEMEMBER.BUSNSNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGIONNull() {
                return this.IsNull(this.tableVIEMEMBER.REGIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGIONNull() {
                this[this.tableVIEMEMBER.REGIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGIONNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.REGIONNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGIONNAMENull() {
                this[this.tableVIEMEMBER.REGIONNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOSTCENTERNull() {
                return this.IsNull(this.tableVIEMEMBER.COSTCENTERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOSTCENTERNull() {
                this[this.tableVIEMEMBER.COSTCENTERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENTDATENull() {
                return this.IsNull(this.tableVIEMEMBER.ENTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENTDATENull() {
                this[this.tableVIEMEMBER.ENTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOFFDATENull() {
                return this.IsNull(this.tableVIEMEMBER.OFFDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOFFDATENull() {
                this[this.tableVIEMEMBER.OFFDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACTSDATENull() {
                return this.IsNull(this.tableVIEMEMBER.CONTRACTSDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACTSDATENull() {
                this[this.tableVIEMEMBER.CONTRACTSDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTRACTEDATENull() {
                return this.IsNull(this.tableVIEMEMBER.CONTRACTEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTRACTEDATENull() {
                this[this.tableVIEMEMBER.CONTRACTEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSEXNull() {
                return this.IsNull(this.tableVIEMEMBER.SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSEXNull() {
                this[this.tableVIEMEMBER.SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBIRTHDATENull() {
                return this.IsNull(this.tableVIEMEMBER.BIRTHDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBIRTHDATENull() {
                this[this.tableVIEMEMBER.BIRTHDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCATIONCODENull() {
                return this.IsNull(this.tableVIEMEMBER.LOCATIONCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCATIONCODENull() {
                this[this.tableVIEMEMBER.LOCATIONCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCATIONNAMENull() {
                return this.IsNull(this.tableVIEMEMBER.LOCATIONNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCATIONNAMENull() {
                this[this.tableVIEMEMBER.LOCATIONNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINALDATENull() {
                return this.IsNull(this.tableVIEMEMBER.FINALDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINALDATENull() {
                this[this.tableVIEMEMBER.FINALDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTARTDATENull() {
                return this.IsNull(this.tableVIEMEMBER.STARTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTARTDATENull() {
                this[this.tableVIEMEMBER.STARTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMPTYPENull() {
                return this.IsNull(this.tableVIEMEMBER.EMPTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMPTYPENull() {
                this[this.tableVIEMEMBER.EMPTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPIDNull() {
                return this.IsNull(this.tableVIEMEMBER.OPIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPIDNull() {
                this[this.tableVIEMEMBER.OPIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOGINIDNull() {
                return this.IsNull(this.tableVIEMEMBER.LOGINIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOGINIDNull() {
                this[this.tableVIEMEMBER.LOGINIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREPFLGNull() {
                return this.IsNull(this.tableVIEMEMBER.REPFLGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREPFLGNull() {
                this[this.tableVIEMEMBER.REPFLGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHIRECODENull() {
                return this.IsNull(this.tableVIEMEMBER.HIRECODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHIRECODENull() {
                this[this.tableVIEMEMBER.HIRECODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDDATENull() {
                return this.IsNull(this.tableVIEMEMBER.UPDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDDATENull() {
                this[this.tableVIEMEMBER.UPDDATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VIEMEMBERRowChangeEvent : global::System.EventArgs {
            
            private VIEMEMBERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VIEMEMBERRowChangeEvent(VIEMEMBERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VIEMEMBERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace FET.POS.Model.DTO.ConvertApp.EMPLOYEE_CONVERT_DTOTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VIEMEMBERTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VIEMEMBERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "VIEMEMBER";
            tableMapping.ColumnMappings.Add("EMPNO", "EMPNO");
            tableMapping.ColumnMappings.Add("DEPTCODE", "DEPTCODE");
            tableMapping.ColumnMappings.Add("EMPNAME", "EMPNAME");
            tableMapping.ColumnMappings.Add("EMPFNAME", "EMPFNAME");
            tableMapping.ColumnMappings.Add("EMPLNAME", "EMPLNAME");
            tableMapping.ColumnMappings.Add("ENGNAME", "ENGNAME");
            tableMapping.ColumnMappings.Add("ENGFNAME", "ENGFNAME");
            tableMapping.ColumnMappings.Add("ENGLNAME", "ENGLNAME");
            tableMapping.ColumnMappings.Add("ALIASNAME", "ALIASNAME");
            tableMapping.ColumnMappings.Add("CELLULAR", "CELLULAR");
            tableMapping.ColumnMappings.Add("EXTENSION", "EXTENSION");
            tableMapping.ColumnMappings.Add("FAXNO", "FAXNO");
            tableMapping.ColumnMappings.Add("MVPN", "MVPN");
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL");
            tableMapping.ColumnMappings.Add("TITLE", "TITLE");
            tableMapping.ColumnMappings.Add("TITLENAME", "TITLENAME");
            tableMapping.ColumnMappings.Add("TITLECLASS", "TITLECLASS");
            tableMapping.ColumnMappings.Add("COMPCODE", "COMPCODE");
            tableMapping.ColumnMappings.Add("COMPNAME", "COMPNAME");
            tableMapping.ColumnMappings.Add("BUSNSCODE", "BUSNSCODE");
            tableMapping.ColumnMappings.Add("BUSNSNAME", "BUSNSNAME");
            tableMapping.ColumnMappings.Add("REGION", "REGION");
            tableMapping.ColumnMappings.Add("REGIONNAME", "REGIONNAME");
            tableMapping.ColumnMappings.Add("COSTCENTER", "COSTCENTER");
            tableMapping.ColumnMappings.Add("ENTDATE", "ENTDATE");
            tableMapping.ColumnMappings.Add("OFFDATE", "OFFDATE");
            tableMapping.ColumnMappings.Add("CONTRACTSDATE", "CONTRACTSDATE");
            tableMapping.ColumnMappings.Add("CONTRACTEDATE", "CONTRACTEDATE");
            tableMapping.ColumnMappings.Add("SEX", "SEX");
            tableMapping.ColumnMappings.Add("BIRTHDATE", "BIRTHDATE");
            tableMapping.ColumnMappings.Add("LOCATIONCODE", "LOCATIONCODE");
            tableMapping.ColumnMappings.Add("LOCATIONNAME", "LOCATIONNAME");
            tableMapping.ColumnMappings.Add("FINALDATE", "FINALDATE");
            tableMapping.ColumnMappings.Add("STARTDATE", "STARTDATE");
            tableMapping.ColumnMappings.Add("EMPTYPE", "EMPTYPE");
            tableMapping.ColumnMappings.Add("OPID", "OPID");
            tableMapping.ColumnMappings.Add("LOGINID", "LOGINID");
            tableMapping.ColumnMappings.Add("REPFLG", "REPFLG");
            tableMapping.ColumnMappings.Add("HIRECODE", "HIRECODE");
            tableMapping.ColumnMappings.Add("UPDDATE", "UPDDATE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""WEBPOS"".""VIEMEMBER"" (""EMPNO"", ""DEPTCODE"", ""EMPNAME"", ""EMPFNAME"", ""EMPLNAME"", ""ENGNAME"", ""ENGFNAME"", ""ENGLNAME"", ""ALIASNAME"", ""CELLULAR"", ""EXTENSION"", ""FAXNO"", ""MVPN"", ""EMAIL"", ""TITLE"", ""TITLENAME"", ""TITLECLASS"", ""COMPCODE"", ""COMPNAME"", ""BUSNSCODE"", ""BUSNSNAME"", ""REGION"", ""REGIONNAME"", ""COSTCENTER"", ""ENTDATE"", ""OFFDATE"", ""CONTRACTSDATE"", ""CONTRACTEDATE"", ""SEX"", ""BIRTHDATE"", ""LOCATIONCODE"", ""LOCATIONNAME"", ""FINALDATE"", ""STARTDATE"", ""EMPTYPE"", ""OPID"", ""LOGINID"", ""REPFLG"", ""HIRECODE"", ""UPDDATE"") VALUES (:EMPNO, :DEPTCODE, :EMPNAME, :EMPFNAME, :EMPLNAME, :ENGNAME, :ENGFNAME, :ENGLNAME, :ALIASNAME, :CELLULAR, :EXTENSION, :FAXNO, :MVPN, :EMAIL, :TITLE, :TITLENAME, :TITLECLASS, :COMPCODE, :COMPNAME, :BUSNSCODE, :BUSNSNAME, :REGION, :REGIONNAME, :COSTCENTER, :ENTDATE, :OFFDATE, :CONTRACTSDATE, :CONTRACTEDATE, :SEX, :BIRTHDATE, :LOCATIONCODE, :LOCATIONNAME, :FINALDATE, :STARTDATE, :EMPTYPE, :OPID, :LOGINID, :REPFLG, :HIRECODE, :UPDDATE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMPNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMPNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DEPTCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "DEPTCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMPNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMPNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMPFNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMPFNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMPLNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMPLNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ENGNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ENGNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ENGFNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ENGFNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ENGLNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ENGLNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ALIASNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ALIASNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CELLULAR", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CELLULAR", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EXTENSION", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EXTENSION", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FAXNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FAXNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MVPN", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MVPN", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMAIL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMAIL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TITLE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TITLE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TITLENAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TITLENAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TITLECLASS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TITLECLASS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COMPCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COMPNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("BUSNSCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "BUSNSCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("BUSNSNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "BUSNSNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REGION", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REGION", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REGIONNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REGIONNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COSTCENTER", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COSTCENTER", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ENTDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ENTDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("OFFDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "OFFDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONTRACTSDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONTRACTSDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONTRACTEDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONTRACTEDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SEX", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("BIRTHDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "BIRTHDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LOCATIONCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "LOCATIONCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LOCATIONNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "LOCATIONNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FINALDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FINALDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("STARTDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "STARTDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMPTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMPTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("OPID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "OPID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LOGINID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "LOGINID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REPFLG", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REPFLG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("HIRECODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "HIRECODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::FET.POS.Model.Properties.Settings.Default.ConnectionString3;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT EMPNO, DEPTCODE, EMPNAME, EMPFNAME, EMPLNAME, ENGNAME, ENGFNAME, ENGLNAME, ALIASNAME, CELLULAR, EXTENSION, FAXNO, MVPN, EMAIL, TITLE, TITLENAME, TITLECLASS, COMPCODE, COMPNAME, BUSNSCODE, BUSNSNAME, REGION, REGIONNAME, COSTCENTER, ENTDATE, OFFDATE, CONTRACTSDATE, CONTRACTEDATE, SEX, BIRTHDATE, LOCATIONCODE, LOCATIONNAME, FINALDATE, STARTDATE, EMPTYPE, OPID, LOGINID, REPFLG, HIRECODE, UPDDATE FROM WEBPOS.VIEMEMBER";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EMPLOYEE_CONVERT_DTO.VIEMEMBERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EMPLOYEE_CONVERT_DTO.VIEMEMBERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EMPLOYEE_CONVERT_DTO.VIEMEMBERDataTable dataTable = new EMPLOYEE_CONVERT_DTO.VIEMEMBERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EMPLOYEE_CONVERT_DTO.VIEMEMBERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EMPLOYEE_CONVERT_DTO dataSet) {
            return this.Adapter.Update(dataSet, "VIEMEMBER");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string EMPNO, 
                    string DEPTCODE, 
                    string EMPNAME, 
                    string EMPFNAME, 
                    string EMPLNAME, 
                    string ENGNAME, 
                    string ENGFNAME, 
                    string ENGLNAME, 
                    string ALIASNAME, 
                    string CELLULAR, 
                    string EXTENSION, 
                    string FAXNO, 
                    string MVPN, 
                    string EMAIL, 
                    string TITLE, 
                    string TITLENAME, 
                    string TITLECLASS, 
                    string COMPCODE, 
                    string COMPNAME, 
                    string BUSNSCODE, 
                    string BUSNSNAME, 
                    string REGION, 
                    string REGIONNAME, 
                    string COSTCENTER, 
                    string ENTDATE, 
                    string OFFDATE, 
                    string CONTRACTSDATE, 
                    string CONTRACTEDATE, 
                    string SEX, 
                    string BIRTHDATE, 
                    string LOCATIONCODE, 
                    string LOCATIONNAME, 
                    string FINALDATE, 
                    string STARTDATE, 
                    string EMPTYPE, 
                    string OPID, 
                    string LOGINID, 
                    string REPFLG, 
                    string HIRECODE, 
                    string UPDDATE) {
            if ((EMPNO == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EMPNO));
            }
            if ((DEPTCODE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DEPTCODE));
            }
            if ((EMPNAME == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(EMPNAME));
            }
            if ((EMPFNAME == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(EMPFNAME));
            }
            if ((EMPLNAME == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(EMPLNAME));
            }
            if ((ENGNAME == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ENGNAME));
            }
            if ((ENGFNAME == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ENGFNAME));
            }
            if ((ENGLNAME == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ENGLNAME));
            }
            if ((ALIASNAME == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ALIASNAME));
            }
            if ((CELLULAR == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CELLULAR));
            }
            if ((EXTENSION == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(EXTENSION));
            }
            if ((FAXNO == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(FAXNO));
            }
            if ((MVPN == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(MVPN));
            }
            if ((EMAIL == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(EMAIL));
            }
            if ((TITLE == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(TITLE));
            }
            if ((TITLENAME == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(TITLENAME));
            }
            if ((TITLECLASS == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(TITLECLASS));
            }
            if ((COMPCODE == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(COMPCODE));
            }
            if ((COMPNAME == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(COMPNAME));
            }
            if ((BUSNSCODE == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(BUSNSCODE));
            }
            if ((BUSNSNAME == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(BUSNSNAME));
            }
            if ((REGION == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(REGION));
            }
            if ((REGIONNAME == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(REGIONNAME));
            }
            if ((COSTCENTER == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(COSTCENTER));
            }
            if ((ENTDATE == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(ENTDATE));
            }
            if ((OFFDATE == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(OFFDATE));
            }
            if ((CONTRACTSDATE == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(CONTRACTSDATE));
            }
            if ((CONTRACTEDATE == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(CONTRACTEDATE));
            }
            if ((SEX == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(SEX));
            }
            if ((BIRTHDATE == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(BIRTHDATE));
            }
            if ((LOCATIONCODE == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(LOCATIONCODE));
            }
            if ((LOCATIONNAME == null)) {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = ((string)(LOCATIONNAME));
            }
            if ((FINALDATE == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((string)(FINALDATE));
            }
            if ((STARTDATE == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((string)(STARTDATE));
            }
            if ((EMPTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = ((string)(EMPTYPE));
            }
            if ((OPID == null)) {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = ((string)(OPID));
            }
            if ((LOGINID == null)) {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = ((string)(LOGINID));
            }
            if ((REPFLG == null)) {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = ((string)(REPFLG));
            }
            if ((HIRECODE == null)) {
                this.Adapter.InsertCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[38].Value = ((string)(HIRECODE));
            }
            if ((UPDDATE == null)) {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = ((string)(UPDDATE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private VIEMEMBERTableAdapter _vIEMEMBERTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public VIEMEMBERTableAdapter VIEMEMBERTableAdapter {
            get {
                return this._vIEMEMBERTableAdapter;
            }
            set {
                this._vIEMEMBERTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._vIEMEMBERTableAdapter != null) 
                            && (this._vIEMEMBERTableAdapter.Connection != null))) {
                    return this._vIEMEMBERTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._vIEMEMBERTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(EMPLOYEE_CONVERT_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._vIEMEMBERTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.VIEMEMBER.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._vIEMEMBERTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(EMPLOYEE_CONVERT_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._vIEMEMBERTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.VIEMEMBER.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._vIEMEMBERTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(EMPLOYEE_CONVERT_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._vIEMEMBERTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.VIEMEMBER.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._vIEMEMBERTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(EMPLOYEE_CONVERT_DTO dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._vIEMEMBERTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._vIEMEMBERTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 未包含連接資訊。請將每個 TableAdapterManager 的 TableAdapter 屬性設成有效的 Table" +
                        "Adapter 執行個體。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("無法開始交易。目前的資料連接不支援交易或是目前的狀態不允許交易開始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._vIEMEMBERTableAdapter != null)) {
                    revertConnections.Add(this._vIEMEMBERTableAdapter, this._vIEMEMBERTableAdapter.Connection);
                    this._vIEMEMBERTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._vIEMEMBERTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._vIEMEMBERTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._vIEMEMBERTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._vIEMEMBERTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._vIEMEMBERTableAdapter != null)) {
                    this._vIEMEMBERTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._vIEMEMBERTableAdapter]));
                    this._vIEMEMBERTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591