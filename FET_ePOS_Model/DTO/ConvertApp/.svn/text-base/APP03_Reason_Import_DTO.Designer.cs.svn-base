//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.4206
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FET.POS.Model.DTO.ConvertApp {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("APP03_Reason_Import_DTO")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class APP03_Reason_Import_DTO : global::System.Data.DataSet {
        
        private REASON_OLDDataTable tableREASON_OLD;
        
        private REASONDataTable tableREASON;
        
        private REASON_TEMPDataTable tableREASON_TEMP;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public APP03_Reason_Import_DTO() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected APP03_Reason_Import_DTO(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["REASON_OLD"] != null)) {
                    base.Tables.Add(new REASON_OLDDataTable(ds.Tables["REASON_OLD"]));
                }
                if ((ds.Tables["REASON"] != null)) {
                    base.Tables.Add(new REASONDataTable(ds.Tables["REASON"]));
                }
                if ((ds.Tables["REASON_TEMP"] != null)) {
                    base.Tables.Add(new REASON_TEMPDataTable(ds.Tables["REASON_TEMP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REASON_OLDDataTable REASON_OLD {
            get {
                return this.tableREASON_OLD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REASONDataTable REASON {
            get {
                return this.tableREASON;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REASON_TEMPDataTable REASON_TEMP {
            get {
                return this.tableREASON_TEMP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            APP03_Reason_Import_DTO cln = ((APP03_Reason_Import_DTO)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["REASON_OLD"] != null)) {
                    base.Tables.Add(new REASON_OLDDataTable(ds.Tables["REASON_OLD"]));
                }
                if ((ds.Tables["REASON"] != null)) {
                    base.Tables.Add(new REASONDataTable(ds.Tables["REASON"]));
                }
                if ((ds.Tables["REASON_TEMP"] != null)) {
                    base.Tables.Add(new REASON_TEMPDataTable(ds.Tables["REASON_TEMP"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableREASON_OLD = ((REASON_OLDDataTable)(base.Tables["REASON_OLD"]));
            if ((initTable == true)) {
                if ((this.tableREASON_OLD != null)) {
                    this.tableREASON_OLD.InitVars();
                }
            }
            this.tableREASON = ((REASONDataTable)(base.Tables["REASON"]));
            if ((initTable == true)) {
                if ((this.tableREASON != null)) {
                    this.tableREASON.InitVars();
                }
            }
            this.tableREASON_TEMP = ((REASON_TEMPDataTable)(base.Tables["REASON_TEMP"]));
            if ((initTable == true)) {
                if ((this.tableREASON_TEMP != null)) {
                    this.tableREASON_TEMP.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "APP03_Reason_Import_DTO";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/APP03_Reason_Import_DTO.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableREASON_OLD = new REASON_OLDDataTable();
            base.Tables.Add(this.tableREASON_OLD);
            this.tableREASON = new REASONDataTable();
            base.Tables.Add(this.tableREASON);
            this.tableREASON_TEMP = new REASON_TEMPDataTable();
            base.Tables.Add(this.tableREASON_TEMP);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREASON_OLD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREASON() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREASON_TEMP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            APP03_Reason_Import_DTO ds = new APP03_Reason_Import_DTO();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void REASON_OLDRowChangeEventHandler(object sender, REASON_OLDRowChangeEvent e);
        
        public delegate void REASONRowChangeEventHandler(object sender, REASONRowChangeEvent e);
        
        public delegate void REASON_TEMPRowChangeEventHandler(object sender, REASON_TEMPRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REASON_OLDDataTable : global::System.Data.TypedTableBase<REASON_OLDRow> {
            
            private global::System.Data.DataColumn columnREASONTYPE;
            
            private global::System.Data.DataColumn columnREASON;
            
            private global::System.Data.DataColumn columnCOMPANYCODE;
            
            private global::System.Data.DataColumn columnCEASEDATE;
            
            private global::System.Data.DataColumn columnACCNO;
            
            private global::System.Data.DataColumn columnUPDDATE;
            
            private global::System.Data.DataColumn columnUPDUSRNO;
            
            private global::System.Data.DataColumn columnULSNO;
            
            private global::System.Data.DataColumn columnREASONID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_OLDDataTable() {
                this.TableName = "REASON_OLD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REASON_OLDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REASON_OLDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONTYPEColumn {
                get {
                    return this.columnREASONTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONColumn {
                get {
                    return this.columnREASON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANYCODEColumn {
                get {
                    return this.columnCOMPANYCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CEASEDATEColumn {
                get {
                    return this.columnCEASEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACCNOColumn {
                get {
                    return this.columnACCNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDDATEColumn {
                get {
                    return this.columnUPDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDUSRNOColumn {
                get {
                    return this.columnUPDUSRNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ULSNOColumn {
                get {
                    return this.columnULSNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONIDColumn {
                get {
                    return this.columnREASONID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_OLDRow this[int index] {
                get {
                    return ((REASON_OLDRow)(this.Rows[index]));
                }
            }
            
            public event REASON_OLDRowChangeEventHandler REASON_OLDRowChanging;
            
            public event REASON_OLDRowChangeEventHandler REASON_OLDRowChanged;
            
            public event REASON_OLDRowChangeEventHandler REASON_OLDRowDeleting;
            
            public event REASON_OLDRowChangeEventHandler REASON_OLDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREASON_OLDRow(REASON_OLDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_OLDRow AddREASON_OLDRow(string REASONTYPE, string REASON, string COMPANYCODE, string CEASEDATE, string ACCNO, string UPDDATE, string UPDUSRNO, string ULSNO, decimal REASONID) {
                REASON_OLDRow rowREASON_OLDRow = ((REASON_OLDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        REASONTYPE,
                        REASON,
                        COMPANYCODE,
                        CEASEDATE,
                        ACCNO,
                        UPDDATE,
                        UPDUSRNO,
                        ULSNO,
                        REASONID};
                rowREASON_OLDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREASON_OLDRow);
                return rowREASON_OLDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_OLDRow FindByREASONTYPEREASONCOMPANYCODE(string REASONTYPE, string REASON, string COMPANYCODE) {
                return ((REASON_OLDRow)(this.Rows.Find(new object[] {
                            REASONTYPE,
                            REASON,
                            COMPANYCODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                REASON_OLDDataTable cln = ((REASON_OLDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REASON_OLDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnREASONTYPE = base.Columns["REASONTYPE"];
                this.columnREASON = base.Columns["REASON"];
                this.columnCOMPANYCODE = base.Columns["COMPANYCODE"];
                this.columnCEASEDATE = base.Columns["CEASEDATE"];
                this.columnACCNO = base.Columns["ACCNO"];
                this.columnUPDDATE = base.Columns["UPDDATE"];
                this.columnUPDUSRNO = base.Columns["UPDUSRNO"];
                this.columnULSNO = base.Columns["ULSNO"];
                this.columnREASONID = base.Columns["REASONID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnREASONTYPE = new global::System.Data.DataColumn("REASONTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASONTYPE);
                this.columnREASON = new global::System.Data.DataColumn("REASON", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASON);
                this.columnCOMPANYCODE = new global::System.Data.DataColumn("COMPANYCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANYCODE);
                this.columnCEASEDATE = new global::System.Data.DataColumn("CEASEDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCEASEDATE);
                this.columnACCNO = new global::System.Data.DataColumn("ACCNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCNO);
                this.columnUPDDATE = new global::System.Data.DataColumn("UPDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDDATE);
                this.columnUPDUSRNO = new global::System.Data.DataColumn("UPDUSRNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDUSRNO);
                this.columnULSNO = new global::System.Data.DataColumn("ULSNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnULSNO);
                this.columnREASONID = new global::System.Data.DataColumn("REASONID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASONID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnREASONTYPE,
                                this.columnREASON,
                                this.columnCOMPANYCODE}, true));
                this.columnREASONTYPE.AllowDBNull = false;
                this.columnREASONTYPE.MaxLength = 1;
                this.columnREASON.AllowDBNull = false;
                this.columnREASON.MaxLength = 50;
                this.columnCOMPANYCODE.AllowDBNull = false;
                this.columnCOMPANYCODE.MaxLength = 10;
                this.columnCEASEDATE.MaxLength = 8;
                this.columnACCNO.MaxLength = 30;
                this.columnUPDDATE.MaxLength = 8;
                this.columnUPDUSRNO.MaxLength = 10;
                this.columnULSNO.MaxLength = 13;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_OLDRow NewREASON_OLDRow() {
                return ((REASON_OLDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REASON_OLDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(REASON_OLDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REASON_OLDRowChanged != null)) {
                    this.REASON_OLDRowChanged(this, new REASON_OLDRowChangeEvent(((REASON_OLDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REASON_OLDRowChanging != null)) {
                    this.REASON_OLDRowChanging(this, new REASON_OLDRowChangeEvent(((REASON_OLDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REASON_OLDRowDeleted != null)) {
                    this.REASON_OLDRowDeleted(this, new REASON_OLDRowChangeEvent(((REASON_OLDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REASON_OLDRowDeleting != null)) {
                    this.REASON_OLDRowDeleting(this, new REASON_OLDRowChangeEvent(((REASON_OLDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREASON_OLDRow(REASON_OLDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                APP03_Reason_Import_DTO ds = new APP03_Reason_Import_DTO();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REASON_OLDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REASONDataTable : global::System.Data.TypedTableBase<REASONRow> {
            
            private global::System.Data.DataColumn columnREASONTYPE;
            
            private global::System.Data.DataColumn columnREASON;
            
            private global::System.Data.DataColumn columnCOMPANYCODE;
            
            private global::System.Data.DataColumn columnCEASEDATE;
            
            private global::System.Data.DataColumn columnACCNO;
            
            private global::System.Data.DataColumn columnUPDDATE;
            
            private global::System.Data.DataColumn columnUPDUSRNO;
            
            private global::System.Data.DataColumn columnULSNO;
            
            private global::System.Data.DataColumn columnREASONID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASONDataTable() {
                this.TableName = "REASON";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REASONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REASONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONTYPEColumn {
                get {
                    return this.columnREASONTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONColumn {
                get {
                    return this.columnREASON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANYCODEColumn {
                get {
                    return this.columnCOMPANYCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CEASEDATEColumn {
                get {
                    return this.columnCEASEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACCNOColumn {
                get {
                    return this.columnACCNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDDATEColumn {
                get {
                    return this.columnUPDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDUSRNOColumn {
                get {
                    return this.columnUPDUSRNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ULSNOColumn {
                get {
                    return this.columnULSNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONIDColumn {
                get {
                    return this.columnREASONID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASONRow this[int index] {
                get {
                    return ((REASONRow)(this.Rows[index]));
                }
            }
            
            public event REASONRowChangeEventHandler REASONRowChanging;
            
            public event REASONRowChangeEventHandler REASONRowChanged;
            
            public event REASONRowChangeEventHandler REASONRowDeleting;
            
            public event REASONRowChangeEventHandler REASONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREASONRow(REASONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASONRow AddREASONRow(string REASONTYPE, string REASON, string COMPANYCODE, string CEASEDATE, string ACCNO, string UPDDATE, string UPDUSRNO, string ULSNO, decimal REASONID) {
                REASONRow rowREASONRow = ((REASONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        REASONTYPE,
                        REASON,
                        COMPANYCODE,
                        CEASEDATE,
                        ACCNO,
                        UPDDATE,
                        UPDUSRNO,
                        ULSNO,
                        REASONID};
                rowREASONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREASONRow);
                return rowREASONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                REASONDataTable cln = ((REASONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REASONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnREASONTYPE = base.Columns["REASONTYPE"];
                this.columnREASON = base.Columns["REASON"];
                this.columnCOMPANYCODE = base.Columns["COMPANYCODE"];
                this.columnCEASEDATE = base.Columns["CEASEDATE"];
                this.columnACCNO = base.Columns["ACCNO"];
                this.columnUPDDATE = base.Columns["UPDDATE"];
                this.columnUPDUSRNO = base.Columns["UPDUSRNO"];
                this.columnULSNO = base.Columns["ULSNO"];
                this.columnREASONID = base.Columns["REASONID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnREASONTYPE = new global::System.Data.DataColumn("REASONTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASONTYPE);
                this.columnREASON = new global::System.Data.DataColumn("REASON", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASON);
                this.columnCOMPANYCODE = new global::System.Data.DataColumn("COMPANYCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANYCODE);
                this.columnCEASEDATE = new global::System.Data.DataColumn("CEASEDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCEASEDATE);
                this.columnACCNO = new global::System.Data.DataColumn("ACCNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCNO);
                this.columnUPDDATE = new global::System.Data.DataColumn("UPDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDDATE);
                this.columnUPDUSRNO = new global::System.Data.DataColumn("UPDUSRNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDUSRNO);
                this.columnULSNO = new global::System.Data.DataColumn("ULSNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnULSNO);
                this.columnREASONID = new global::System.Data.DataColumn("REASONID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASONID);
                this.columnREASONTYPE.AllowDBNull = false;
                this.columnREASONTYPE.MaxLength = 1;
                this.columnREASON.AllowDBNull = false;
                this.columnREASON.MaxLength = 50;
                this.columnCOMPANYCODE.AllowDBNull = false;
                this.columnCOMPANYCODE.MaxLength = 10;
                this.columnCEASEDATE.MaxLength = 8;
                this.columnACCNO.MaxLength = 30;
                this.columnUPDDATE.MaxLength = 8;
                this.columnUPDUSRNO.MaxLength = 10;
                this.columnULSNO.MaxLength = 13;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASONRow NewREASONRow() {
                return ((REASONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REASONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(REASONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REASONRowChanged != null)) {
                    this.REASONRowChanged(this, new REASONRowChangeEvent(((REASONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REASONRowChanging != null)) {
                    this.REASONRowChanging(this, new REASONRowChangeEvent(((REASONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REASONRowDeleted != null)) {
                    this.REASONRowDeleted(this, new REASONRowChangeEvent(((REASONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REASONRowDeleting != null)) {
                    this.REASONRowDeleting(this, new REASONRowChangeEvent(((REASONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREASONRow(REASONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                APP03_Reason_Import_DTO ds = new APP03_Reason_Import_DTO();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REASONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REASON_TEMPDataTable : global::System.Data.TypedTableBase<REASON_TEMPRow> {
            
            private global::System.Data.DataColumn columnREASONTYPE;
            
            private global::System.Data.DataColumn columnREASON;
            
            private global::System.Data.DataColumn columnCOMPANYCODE;
            
            private global::System.Data.DataColumn columnCEASEDATE;
            
            private global::System.Data.DataColumn columnACCNO;
            
            private global::System.Data.DataColumn columnUPDDATE;
            
            private global::System.Data.DataColumn columnUPDUSRNO;
            
            private global::System.Data.DataColumn columnULSNO;
            
            private global::System.Data.DataColumn columnREASONID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_TEMPDataTable() {
                this.TableName = "REASON_TEMP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REASON_TEMPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REASON_TEMPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONTYPEColumn {
                get {
                    return this.columnREASONTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONColumn {
                get {
                    return this.columnREASON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANYCODEColumn {
                get {
                    return this.columnCOMPANYCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CEASEDATEColumn {
                get {
                    return this.columnCEASEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACCNOColumn {
                get {
                    return this.columnACCNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDDATEColumn {
                get {
                    return this.columnUPDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDUSRNOColumn {
                get {
                    return this.columnUPDUSRNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ULSNOColumn {
                get {
                    return this.columnULSNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REASONIDColumn {
                get {
                    return this.columnREASONID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_TEMPRow this[int index] {
                get {
                    return ((REASON_TEMPRow)(this.Rows[index]));
                }
            }
            
            public event REASON_TEMPRowChangeEventHandler REASON_TEMPRowChanging;
            
            public event REASON_TEMPRowChangeEventHandler REASON_TEMPRowChanged;
            
            public event REASON_TEMPRowChangeEventHandler REASON_TEMPRowDeleting;
            
            public event REASON_TEMPRowChangeEventHandler REASON_TEMPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREASON_TEMPRow(REASON_TEMPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_TEMPRow AddREASON_TEMPRow(string REASONTYPE, string REASON, string COMPANYCODE, string CEASEDATE, string ACCNO, string UPDDATE, string UPDUSRNO, string ULSNO, decimal REASONID) {
                REASON_TEMPRow rowREASON_TEMPRow = ((REASON_TEMPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        REASONTYPE,
                        REASON,
                        COMPANYCODE,
                        CEASEDATE,
                        ACCNO,
                        UPDDATE,
                        UPDUSRNO,
                        ULSNO,
                        REASONID};
                rowREASON_TEMPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREASON_TEMPRow);
                return rowREASON_TEMPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                REASON_TEMPDataTable cln = ((REASON_TEMPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REASON_TEMPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnREASONTYPE = base.Columns["REASONTYPE"];
                this.columnREASON = base.Columns["REASON"];
                this.columnCOMPANYCODE = base.Columns["COMPANYCODE"];
                this.columnCEASEDATE = base.Columns["CEASEDATE"];
                this.columnACCNO = base.Columns["ACCNO"];
                this.columnUPDDATE = base.Columns["UPDDATE"];
                this.columnUPDUSRNO = base.Columns["UPDUSRNO"];
                this.columnULSNO = base.Columns["ULSNO"];
                this.columnREASONID = base.Columns["REASONID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnREASONTYPE = new global::System.Data.DataColumn("REASONTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASONTYPE);
                this.columnREASON = new global::System.Data.DataColumn("REASON", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASON);
                this.columnCOMPANYCODE = new global::System.Data.DataColumn("COMPANYCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANYCODE);
                this.columnCEASEDATE = new global::System.Data.DataColumn("CEASEDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCEASEDATE);
                this.columnACCNO = new global::System.Data.DataColumn("ACCNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCNO);
                this.columnUPDDATE = new global::System.Data.DataColumn("UPDDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDDATE);
                this.columnUPDUSRNO = new global::System.Data.DataColumn("UPDUSRNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDUSRNO);
                this.columnULSNO = new global::System.Data.DataColumn("ULSNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnULSNO);
                this.columnREASONID = new global::System.Data.DataColumn("REASONID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREASONID);
                this.columnREASONTYPE.AllowDBNull = false;
                this.columnREASONTYPE.MaxLength = 1;
                this.columnREASON.AllowDBNull = false;
                this.columnREASON.MaxLength = 50;
                this.columnCOMPANYCODE.AllowDBNull = false;
                this.columnCOMPANYCODE.MaxLength = 10;
                this.columnCEASEDATE.MaxLength = 8;
                this.columnACCNO.MaxLength = 30;
                this.columnUPDDATE.MaxLength = 8;
                this.columnUPDUSRNO.MaxLength = 10;
                this.columnULSNO.MaxLength = 13;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_TEMPRow NewREASON_TEMPRow() {
                return ((REASON_TEMPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REASON_TEMPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(REASON_TEMPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REASON_TEMPRowChanged != null)) {
                    this.REASON_TEMPRowChanged(this, new REASON_TEMPRowChangeEvent(((REASON_TEMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REASON_TEMPRowChanging != null)) {
                    this.REASON_TEMPRowChanging(this, new REASON_TEMPRowChangeEvent(((REASON_TEMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REASON_TEMPRowDeleted != null)) {
                    this.REASON_TEMPRowDeleted(this, new REASON_TEMPRowChangeEvent(((REASON_TEMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REASON_TEMPRowDeleting != null)) {
                    this.REASON_TEMPRowDeleting(this, new REASON_TEMPRowChangeEvent(((REASON_TEMPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREASON_TEMPRow(REASON_TEMPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                APP03_Reason_Import_DTO ds = new APP03_Reason_Import_DTO();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REASON_TEMPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REASON_OLDRow : global::System.Data.DataRow {
            
            private REASON_OLDDataTable tableREASON_OLD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REASON_OLDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREASON_OLD = ((REASON_OLDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASONTYPE {
                get {
                    return ((string)(this[this.tableREASON_OLD.REASONTYPEColumn]));
                }
                set {
                    this[this.tableREASON_OLD.REASONTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASON {
                get {
                    return ((string)(this[this.tableREASON_OLD.REASONColumn]));
                }
                set {
                    this[this.tableREASON_OLD.REASONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANYCODE {
                get {
                    return ((string)(this[this.tableREASON_OLD.COMPANYCODEColumn]));
                }
                set {
                    this[this.tableREASON_OLD.COMPANYCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CEASEDATE {
                get {
                    try {
                        return ((string)(this[this.tableREASON_OLD.CEASEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_OLD\' 中資料行 \'CEASEDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_OLD.CEASEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACCNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON_OLD.ACCNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_OLD\' 中資料行 \'ACCNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_OLD.ACCNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDDATE {
                get {
                    try {
                        return ((string)(this[this.tableREASON_OLD.UPDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_OLD\' 中資料行 \'UPDDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_OLD.UPDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDUSRNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON_OLD.UPDUSRNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_OLD\' 中資料行 \'UPDUSRNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_OLD.UPDUSRNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ULSNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON_OLD.ULSNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_OLD\' 中資料行 \'ULSNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_OLD.ULSNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal REASONID {
                get {
                    try {
                        return ((decimal)(this[this.tableREASON_OLD.REASONIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_OLD\' 中資料行 \'REASONID\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_OLD.REASONIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCEASEDATENull() {
                return this.IsNull(this.tableREASON_OLD.CEASEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCEASEDATENull() {
                this[this.tableREASON_OLD.CEASEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACCNONull() {
                return this.IsNull(this.tableREASON_OLD.ACCNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACCNONull() {
                this[this.tableREASON_OLD.ACCNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDDATENull() {
                return this.IsNull(this.tableREASON_OLD.UPDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDDATENull() {
                this[this.tableREASON_OLD.UPDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDUSRNONull() {
                return this.IsNull(this.tableREASON_OLD.UPDUSRNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDUSRNONull() {
                this[this.tableREASON_OLD.UPDUSRNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsULSNONull() {
                return this.IsNull(this.tableREASON_OLD.ULSNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetULSNONull() {
                this[this.tableREASON_OLD.ULSNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREASONIDNull() {
                return this.IsNull(this.tableREASON_OLD.REASONIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREASONIDNull() {
                this[this.tableREASON_OLD.REASONIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REASONRow : global::System.Data.DataRow {
            
            private REASONDataTable tableREASON;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REASONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREASON = ((REASONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASONTYPE {
                get {
                    return ((string)(this[this.tableREASON.REASONTYPEColumn]));
                }
                set {
                    this[this.tableREASON.REASONTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASON {
                get {
                    return ((string)(this[this.tableREASON.REASONColumn]));
                }
                set {
                    this[this.tableREASON.REASONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANYCODE {
                get {
                    return ((string)(this[this.tableREASON.COMPANYCODEColumn]));
                }
                set {
                    this[this.tableREASON.COMPANYCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CEASEDATE {
                get {
                    try {
                        return ((string)(this[this.tableREASON.CEASEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON\' 中資料行 \'CEASEDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON.CEASEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACCNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON.ACCNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON\' 中資料行 \'ACCNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON.ACCNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDDATE {
                get {
                    try {
                        return ((string)(this[this.tableREASON.UPDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON\' 中資料行 \'UPDDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON.UPDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDUSRNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON.UPDUSRNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON\' 中資料行 \'UPDUSRNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON.UPDUSRNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ULSNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON.ULSNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON\' 中資料行 \'ULSNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON.ULSNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal REASONID {
                get {
                    try {
                        return ((decimal)(this[this.tableREASON.REASONIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON\' 中資料行 \'REASONID\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON.REASONIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCEASEDATENull() {
                return this.IsNull(this.tableREASON.CEASEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCEASEDATENull() {
                this[this.tableREASON.CEASEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACCNONull() {
                return this.IsNull(this.tableREASON.ACCNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACCNONull() {
                this[this.tableREASON.ACCNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDDATENull() {
                return this.IsNull(this.tableREASON.UPDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDDATENull() {
                this[this.tableREASON.UPDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDUSRNONull() {
                return this.IsNull(this.tableREASON.UPDUSRNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDUSRNONull() {
                this[this.tableREASON.UPDUSRNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsULSNONull() {
                return this.IsNull(this.tableREASON.ULSNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetULSNONull() {
                this[this.tableREASON.ULSNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREASONIDNull() {
                return this.IsNull(this.tableREASON.REASONIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREASONIDNull() {
                this[this.tableREASON.REASONIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REASON_TEMPRow : global::System.Data.DataRow {
            
            private REASON_TEMPDataTable tableREASON_TEMP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REASON_TEMPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREASON_TEMP = ((REASON_TEMPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASONTYPE {
                get {
                    return ((string)(this[this.tableREASON_TEMP.REASONTYPEColumn]));
                }
                set {
                    this[this.tableREASON_TEMP.REASONTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REASON {
                get {
                    return ((string)(this[this.tableREASON_TEMP.REASONColumn]));
                }
                set {
                    this[this.tableREASON_TEMP.REASONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANYCODE {
                get {
                    return ((string)(this[this.tableREASON_TEMP.COMPANYCODEColumn]));
                }
                set {
                    this[this.tableREASON_TEMP.COMPANYCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CEASEDATE {
                get {
                    try {
                        return ((string)(this[this.tableREASON_TEMP.CEASEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_TEMP\' 中資料行 \'CEASEDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_TEMP.CEASEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACCNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON_TEMP.ACCNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_TEMP\' 中資料行 \'ACCNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_TEMP.ACCNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDDATE {
                get {
                    try {
                        return ((string)(this[this.tableREASON_TEMP.UPDDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_TEMP\' 中資料行 \'UPDDATE\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_TEMP.UPDDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDUSRNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON_TEMP.UPDUSRNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_TEMP\' 中資料行 \'UPDUSRNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_TEMP.UPDUSRNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ULSNO {
                get {
                    try {
                        return ((string)(this[this.tableREASON_TEMP.ULSNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_TEMP\' 中資料行 \'ULSNO\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_TEMP.ULSNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal REASONID {
                get {
                    try {
                        return ((decimal)(this[this.tableREASON_TEMP.REASONIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'REASON_TEMP\' 中資料行 \'REASONID\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableREASON_TEMP.REASONIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCEASEDATENull() {
                return this.IsNull(this.tableREASON_TEMP.CEASEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCEASEDATENull() {
                this[this.tableREASON_TEMP.CEASEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACCNONull() {
                return this.IsNull(this.tableREASON_TEMP.ACCNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACCNONull() {
                this[this.tableREASON_TEMP.ACCNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDDATENull() {
                return this.IsNull(this.tableREASON_TEMP.UPDDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDDATENull() {
                this[this.tableREASON_TEMP.UPDDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDUSRNONull() {
                return this.IsNull(this.tableREASON_TEMP.UPDUSRNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDUSRNONull() {
                this[this.tableREASON_TEMP.UPDUSRNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsULSNONull() {
                return this.IsNull(this.tableREASON_TEMP.ULSNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetULSNONull() {
                this[this.tableREASON_TEMP.ULSNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREASONIDNull() {
                return this.IsNull(this.tableREASON_TEMP.REASONIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREASONIDNull() {
                this[this.tableREASON_TEMP.REASONIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REASON_OLDRowChangeEvent : global::System.EventArgs {
            
            private REASON_OLDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_OLDRowChangeEvent(REASON_OLDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_OLDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REASONRowChangeEvent : global::System.EventArgs {
            
            private REASONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASONRowChangeEvent(REASONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REASON_TEMPRowChangeEvent : global::System.EventArgs {
            
            private REASON_TEMPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_TEMPRowChangeEvent(REASON_TEMPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REASON_TEMPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace FET.POS.Model.DTO.ConvertApp.APP03_Reason_Import_DTOTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REASON_OLDTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REASON_OLDTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REASON_OLD";
            tableMapping.ColumnMappings.Add("REASONTYPE", "REASONTYPE");
            tableMapping.ColumnMappings.Add("REASON", "REASON");
            tableMapping.ColumnMappings.Add("COMPANYCODE", "COMPANYCODE");
            tableMapping.ColumnMappings.Add("CEASEDATE", "CEASEDATE");
            tableMapping.ColumnMappings.Add("ACCNO", "ACCNO");
            tableMapping.ColumnMappings.Add("UPDDATE", "UPDDATE");
            tableMapping.ColumnMappings.Add("UPDUSRNO", "UPDUSRNO");
            tableMapping.ColumnMappings.Add("ULSNO", "ULSNO");
            tableMapping.ColumnMappings.Add("REASONID", "REASONID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""POSUSER"".""REASON"" WHERE ((""REASONTYPE"" = :Original_REASONTYPE) AND (""REASON"" = :Original_REASON) AND (""COMPANYCODE"" = :Original_COMPANYCODE) AND ((:IsNull_CEASEDATE = 1 AND ""CEASEDATE"" IS NULL) OR (""CEASEDATE"" = :Original_CEASEDATE)) AND ((:IsNull_ACCNO = 1 AND ""ACCNO"" IS NULL) OR (""ACCNO"" = :Original_ACCNO)) AND ((:IsNull_UPDDATE = 1 AND ""UPDDATE"" IS NULL) OR (""UPDDATE"" = :Original_UPDDATE)) AND ((:IsNull_UPDUSRNO = 1 AND ""UPDUSRNO"" IS NULL) OR (""UPDUSRNO"" = :Original_UPDUSRNO)) AND ((:IsNull_ULSNO = 1 AND ""ULSNO"" IS NULL) OR (""ULSNO"" = :Original_ULSNO)) AND ((:IsNull_REASONID = 1 AND ""REASONID"" IS NULL) OR (""REASONID"" = :Original_REASONID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_REASONTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASONTYPE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_REASON", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASON", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_COMPANYCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPANYCODE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_CEASEDATE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CEASEDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_ACCNO", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ACCNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_UPDDATE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_UPDDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_UPDUSRNO", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_UPDUSRNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_ULSNO", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ULSNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_REASONID", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_REASONID", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"POSUSER\".\"REASON\" (\"REASONTYPE\", \"REASON\", \"COMPANYCODE\", \"CEASEDATE" +
                "\", \"ACCNO\", \"UPDDATE\", \"UPDUSRNO\", \"ULSNO\", \"REASONID\") VALUES (:REASONTYPE, :RE" +
                "ASON, :COMPANYCODE, :CEASEDATE, :ACCNO, :UPDDATE, :UPDUSRNO, :ULSNO, :REASONID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASONTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASON", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASON", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COMPANYCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPANYCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CEASEDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ACCNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDUSRNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ULSNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONID", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""POSUSER"".""REASON"" SET ""REASONTYPE"" = :REASONTYPE, ""REASON"" = :REASON, ""COMPANYCODE"" = :COMPANYCODE, ""CEASEDATE"" = :CEASEDATE, ""ACCNO"" = :ACCNO, ""UPDDATE"" = :UPDDATE, ""UPDUSRNO"" = :UPDUSRNO, ""ULSNO"" = :ULSNO, ""REASONID"" = :REASONID WHERE ((""REASONTYPE"" = :Original_REASONTYPE) AND (""REASON"" = :Original_REASON) AND (""COMPANYCODE"" = :Original_COMPANYCODE) AND ((:IsNull_CEASEDATE = 1 AND ""CEASEDATE"" IS NULL) OR (""CEASEDATE"" = :Original_CEASEDATE)) AND ((:IsNull_ACCNO = 1 AND ""ACCNO"" IS NULL) OR (""ACCNO"" = :Original_ACCNO)) AND ((:IsNull_UPDDATE = 1 AND ""UPDDATE"" IS NULL) OR (""UPDDATE"" = :Original_UPDDATE)) AND ((:IsNull_UPDUSRNO = 1 AND ""UPDUSRNO"" IS NULL) OR (""UPDUSRNO"" = :Original_UPDUSRNO)) AND ((:IsNull_ULSNO = 1 AND ""ULSNO"" IS NULL) OR (""ULSNO"" = :Original_ULSNO)) AND ((:IsNull_REASONID = 1 AND ""REASONID"" IS NULL) OR (""REASONID"" = :Original_REASONID)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASONTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASON", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASON", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COMPANYCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPANYCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CEASEDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ACCNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDUSRNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ULSNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONID", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_REASONTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASONTYPE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_REASON", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASON", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_COMPANYCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPANYCODE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_CEASEDATE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_CEASEDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_ACCNO", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ACCNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_UPDDATE", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_UPDDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_UPDUSRNO", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_UPDUSRNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_ULSNO", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ULSNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IsNull_REASONID", global::System.Data.OracleClient.OracleType.Int32, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_REASONID", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::FET.POS.Model.Properties.Settings.Default.ConnectionString2;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT REASONTYPE, REASON, COMPANYCODE, CEASEDATE, ACCNO, UPDDATE, UPDUSRNO, ULSN" +
                "O, REASONID FROM POSUSER.REASON";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(APP03_Reason_Import_DTO.REASON_OLDDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual APP03_Reason_Import_DTO.REASON_OLDDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            APP03_Reason_Import_DTO.REASON_OLDDataTable dataTable = new APP03_Reason_Import_DTO.REASON_OLDDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(APP03_Reason_Import_DTO.REASON_OLDDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(APP03_Reason_Import_DTO dataSet) {
            return this.Adapter.Update(dataSet, "REASON_OLD");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_REASONTYPE, string Original_REASON, string Original_COMPANYCODE, string Original_CEASEDATE, string Original_ACCNO, string Original_UPDDATE, string Original_UPDUSRNO, string Original_ULSNO, global::System.Nullable<decimal> Original_REASONID) {
            if ((Original_REASONTYPE == null)) {
                throw new global::System.ArgumentNullException("Original_REASONTYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_REASONTYPE));
            }
            if ((Original_REASON == null)) {
                throw new global::System.ArgumentNullException("Original_REASON");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_REASON));
            }
            if ((Original_COMPANYCODE == null)) {
                throw new global::System.ArgumentNullException("Original_COMPANYCODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_COMPANYCODE));
            }
            if ((Original_CEASEDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_CEASEDATE));
            }
            if ((Original_ACCNO == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ACCNO));
            }
            if ((Original_UPDDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_UPDDATE));
            }
            if ((Original_UPDUSRNO == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_UPDUSRNO));
            }
            if ((Original_ULSNO == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ULSNO));
            }
            if ((Original_REASONID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_REASONID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string REASONTYPE, string REASON, string COMPANYCODE, string CEASEDATE, string ACCNO, string UPDDATE, string UPDUSRNO, string ULSNO, global::System.Nullable<decimal> REASONID) {
            if ((REASONTYPE == null)) {
                throw new global::System.ArgumentNullException("REASONTYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(REASONTYPE));
            }
            if ((REASON == null)) {
                throw new global::System.ArgumentNullException("REASON");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(REASON));
            }
            if ((COMPANYCODE == null)) {
                throw new global::System.ArgumentNullException("COMPANYCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(COMPANYCODE));
            }
            if ((CEASEDATE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CEASEDATE));
            }
            if ((ACCNO == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ACCNO));
            }
            if ((UPDDATE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UPDDATE));
            }
            if ((UPDUSRNO == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(UPDUSRNO));
            }
            if ((ULSNO == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ULSNO));
            }
            if ((REASONID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(REASONID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string REASONTYPE, 
                    string REASON, 
                    string COMPANYCODE, 
                    string CEASEDATE, 
                    string ACCNO, 
                    string UPDDATE, 
                    string UPDUSRNO, 
                    string ULSNO, 
                    global::System.Nullable<decimal> REASONID, 
                    string Original_REASONTYPE, 
                    string Original_REASON, 
                    string Original_COMPANYCODE, 
                    string Original_CEASEDATE, 
                    string Original_ACCNO, 
                    string Original_UPDDATE, 
                    string Original_UPDUSRNO, 
                    string Original_ULSNO, 
                    global::System.Nullable<decimal> Original_REASONID) {
            if ((REASONTYPE == null)) {
                throw new global::System.ArgumentNullException("REASONTYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(REASONTYPE));
            }
            if ((REASON == null)) {
                throw new global::System.ArgumentNullException("REASON");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(REASON));
            }
            if ((COMPANYCODE == null)) {
                throw new global::System.ArgumentNullException("COMPANYCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(COMPANYCODE));
            }
            if ((CEASEDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CEASEDATE));
            }
            if ((ACCNO == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ACCNO));
            }
            if ((UPDDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(UPDDATE));
            }
            if ((UPDUSRNO == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(UPDUSRNO));
            }
            if ((ULSNO == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ULSNO));
            }
            if ((REASONID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(REASONID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_REASONTYPE == null)) {
                throw new global::System.ArgumentNullException("Original_REASONTYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_REASONTYPE));
            }
            if ((Original_REASON == null)) {
                throw new global::System.ArgumentNullException("Original_REASON");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_REASON));
            }
            if ((Original_COMPANYCODE == null)) {
                throw new global::System.ArgumentNullException("Original_COMPANYCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_COMPANYCODE));
            }
            if ((Original_CEASEDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_CEASEDATE));
            }
            if ((Original_ACCNO == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ACCNO));
            }
            if ((Original_UPDDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_UPDDATE));
            }
            if ((Original_UPDUSRNO == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_UPDUSRNO));
            }
            if ((Original_ULSNO == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_ULSNO));
            }
            if ((Original_REASONID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_REASONID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CEASEDATE, string ACCNO, string UPDDATE, string UPDUSRNO, string ULSNO, global::System.Nullable<decimal> REASONID, string Original_REASONTYPE, string Original_REASON, string Original_COMPANYCODE, string Original_CEASEDATE, string Original_ACCNO, string Original_UPDDATE, string Original_UPDUSRNO, string Original_ULSNO, global::System.Nullable<decimal> Original_REASONID) {
            return this.Update(Original_REASONTYPE, Original_REASON, Original_COMPANYCODE, CEASEDATE, ACCNO, UPDDATE, UPDUSRNO, ULSNO, REASONID, Original_REASONTYPE, Original_REASON, Original_COMPANYCODE, Original_CEASEDATE, Original_ACCNO, Original_UPDDATE, Original_UPDUSRNO, Original_ULSNO, Original_REASONID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REASONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REASONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REASON";
            tableMapping.ColumnMappings.Add("REASONTYPE", "REASONTYPE");
            tableMapping.ColumnMappings.Add("REASON", "REASON");
            tableMapping.ColumnMappings.Add("COMPANYCODE", "COMPANYCODE");
            tableMapping.ColumnMappings.Add("CEASEDATE", "CEASEDATE");
            tableMapping.ColumnMappings.Add("ACCNO", "ACCNO");
            tableMapping.ColumnMappings.Add("UPDDATE", "UPDDATE");
            tableMapping.ColumnMappings.Add("UPDUSRNO", "UPDUSRNO");
            tableMapping.ColumnMappings.Add("ULSNO", "ULSNO");
            tableMapping.ColumnMappings.Add("REASONID", "REASONID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"WEBPOS\".\"REASON\" (\"REASONTYPE\", \"REASON\", \"COMPANYCODE\", \"CEASEDATE\"" +
                ", \"ACCNO\", \"UPDDATE\", \"UPDUSRNO\", \"ULSNO\", \"REASONID\") VALUES (:REASONTYPE, :REA" +
                "SON, :COMPANYCODE, :CEASEDATE, :ACCNO, :UPDDATE, :UPDUSRNO, :ULSNO, :REASONID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASONTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASON", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASON", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COMPANYCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPANYCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CEASEDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ACCNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDUSRNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ULSNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONID", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::FET.POS.Model.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT REASONTYPE, REASON, COMPANYCODE, CEASEDATE, ACCNO, UPDDATE, UPDUSRNO, ULSN" +
                "O, REASONID FROM WEBPOS.REASON";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(APP03_Reason_Import_DTO.REASONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual APP03_Reason_Import_DTO.REASONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            APP03_Reason_Import_DTO.REASONDataTable dataTable = new APP03_Reason_Import_DTO.REASONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(APP03_Reason_Import_DTO.REASONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(APP03_Reason_Import_DTO dataSet) {
            return this.Adapter.Update(dataSet, "REASON");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string REASONTYPE, string REASON, string COMPANYCODE, string CEASEDATE, string ACCNO, string UPDDATE, string UPDUSRNO, string ULSNO, global::System.Nullable<decimal> REASONID) {
            if ((REASONTYPE == null)) {
                throw new global::System.ArgumentNullException("REASONTYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(REASONTYPE));
            }
            if ((REASON == null)) {
                throw new global::System.ArgumentNullException("REASON");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(REASON));
            }
            if ((COMPANYCODE == null)) {
                throw new global::System.ArgumentNullException("COMPANYCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(COMPANYCODE));
            }
            if ((CEASEDATE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CEASEDATE));
            }
            if ((ACCNO == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ACCNO));
            }
            if ((UPDDATE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UPDDATE));
            }
            if ((UPDUSRNO == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(UPDUSRNO));
            }
            if ((ULSNO == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ULSNO));
            }
            if ((REASONID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(REASONID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REASON_TEMPTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REASON_TEMPTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REASON_TEMP";
            tableMapping.ColumnMappings.Add("REASONTYPE", "REASONTYPE");
            tableMapping.ColumnMappings.Add("REASON", "REASON");
            tableMapping.ColumnMappings.Add("COMPANYCODE", "COMPANYCODE");
            tableMapping.ColumnMappings.Add("CEASEDATE", "CEASEDATE");
            tableMapping.ColumnMappings.Add("ACCNO", "ACCNO");
            tableMapping.ColumnMappings.Add("UPDDATE", "UPDDATE");
            tableMapping.ColumnMappings.Add("UPDUSRNO", "UPDUSRNO");
            tableMapping.ColumnMappings.Add("ULSNO", "ULSNO");
            tableMapping.ColumnMappings.Add("REASONID", "REASONID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"WEBPOS\".\"REASON_TEMP\" (\"REASONTYPE\", \"REASON\", \"COMPANYCODE\", \"CEASE" +
                "DATE\", \"ACCNO\", \"UPDDATE\", \"UPDUSRNO\", \"ULSNO\", \"REASONID\") VALUES (:REASONTYPE," +
                " :REASON, :COMPANYCODE, :CEASEDATE, :ACCNO, :UPDDATE, :UPDUSRNO, :ULSNO, :REASON" +
                "ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASONTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASON", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "REASON", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COMPANYCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COMPANYCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CEASEDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CEASEDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ACCNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ACCNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDDATE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDDATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("UPDUSRNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "UPDUSRNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ULSNO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ULSNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("REASONID", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "REASONID", global::System.Data.DataRowVersion.Current, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::FET.POS.Model.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT REASONTYPE, REASON, COMPANYCODE, CEASEDATE, ACCNO, UPDDATE, UPDUSRNO, ULSN" +
                "O, REASONID FROM WEBPOS.REASON_TEMP";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(APP03_Reason_Import_DTO.REASON_TEMPDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual APP03_Reason_Import_DTO.REASON_TEMPDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            APP03_Reason_Import_DTO.REASON_TEMPDataTable dataTable = new APP03_Reason_Import_DTO.REASON_TEMPDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(APP03_Reason_Import_DTO.REASON_TEMPDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(APP03_Reason_Import_DTO dataSet) {
            return this.Adapter.Update(dataSet, "REASON_TEMP");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string REASONTYPE, string REASON, string COMPANYCODE, string CEASEDATE, string ACCNO, string UPDDATE, string UPDUSRNO, string ULSNO, global::System.Nullable<decimal> REASONID) {
            if ((REASONTYPE == null)) {
                throw new global::System.ArgumentNullException("REASONTYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(REASONTYPE));
            }
            if ((REASON == null)) {
                throw new global::System.ArgumentNullException("REASON");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(REASON));
            }
            if ((COMPANYCODE == null)) {
                throw new global::System.ArgumentNullException("COMPANYCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(COMPANYCODE));
            }
            if ((CEASEDATE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CEASEDATE));
            }
            if ((ACCNO == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ACCNO));
            }
            if ((UPDDATE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UPDDATE));
            }
            if ((UPDUSRNO == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(UPDUSRNO));
            }
            if ((ULSNO == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ULSNO));
            }
            if ((REASONID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(REASONID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private REASON_OLDTableAdapter _rEASON_OLDTableAdapter;
        
        private REASONTableAdapter _rEASONTableAdapter;
        
        private REASON_TEMPTableAdapter _rEASON_TEMPTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public REASON_OLDTableAdapter REASON_OLDTableAdapter {
            get {
                return this._rEASON_OLDTableAdapter;
            }
            set {
                this._rEASON_OLDTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public REASONTableAdapter REASONTableAdapter {
            get {
                return this._rEASONTableAdapter;
            }
            set {
                this._rEASONTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public REASON_TEMPTableAdapter REASON_TEMPTableAdapter {
            get {
                return this._rEASON_TEMPTableAdapter;
            }
            set {
                this._rEASON_TEMPTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._rEASON_OLDTableAdapter != null) 
                            && (this._rEASON_OLDTableAdapter.Connection != null))) {
                    return this._rEASON_OLDTableAdapter.Connection;
                }
                if (((this._rEASONTableAdapter != null) 
                            && (this._rEASONTableAdapter.Connection != null))) {
                    return this._rEASONTableAdapter.Connection;
                }
                if (((this._rEASON_TEMPTableAdapter != null) 
                            && (this._rEASON_TEMPTableAdapter.Connection != null))) {
                    return this._rEASON_TEMPTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._rEASON_OLDTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._rEASONTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._rEASON_TEMPTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(APP03_Reason_Import_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._rEASON_TEMPTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.REASON_TEMP.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rEASON_TEMPTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._rEASONTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.REASON.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rEASONTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._rEASON_OLDTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.REASON_OLD.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._rEASON_OLDTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(APP03_Reason_Import_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._rEASON_TEMPTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.REASON_TEMP.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rEASON_TEMPTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._rEASONTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.REASON.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rEASONTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._rEASON_OLDTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.REASON_OLD.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._rEASON_OLDTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(APP03_Reason_Import_DTO dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._rEASON_OLDTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.REASON_OLD.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rEASON_OLDTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._rEASONTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.REASON.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rEASONTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._rEASON_TEMPTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.REASON_TEMP.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._rEASON_TEMPTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(APP03_Reason_Import_DTO dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._rEASON_OLDTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rEASON_OLDTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。");
            }
            if (((this._rEASONTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rEASONTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。");
            }
            if (((this._rEASON_TEMPTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._rEASON_TEMPTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("所有以 TableAdapterManager 管理的 TableAdapters 必須使用相同的連接字串。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 未包含連接資訊。請將每個 TableAdapterManager 的 TableAdapter 屬性設成有效的 Table" +
                        "Adapter 執行個體。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("無法開始交易。目前的資料連接不支援交易或是目前的狀態不允許交易開始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._rEASON_OLDTableAdapter != null)) {
                    revertConnections.Add(this._rEASON_OLDTableAdapter, this._rEASON_OLDTableAdapter.Connection);
                    this._rEASON_OLDTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._rEASON_OLDTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._rEASON_OLDTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rEASON_OLDTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rEASON_OLDTableAdapter.Adapter);
                    }
                }
                if ((this._rEASONTableAdapter != null)) {
                    revertConnections.Add(this._rEASONTableAdapter, this._rEASONTableAdapter.Connection);
                    this._rEASONTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._rEASONTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._rEASONTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rEASONTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rEASONTableAdapter.Adapter);
                    }
                }
                if ((this._rEASON_TEMPTableAdapter != null)) {
                    revertConnections.Add(this._rEASON_TEMPTableAdapter, this._rEASON_TEMPTableAdapter.Connection);
                    this._rEASON_TEMPTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._rEASON_TEMPTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._rEASON_TEMPTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._rEASON_TEMPTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._rEASON_TEMPTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._rEASON_OLDTableAdapter != null)) {
                    this._rEASON_OLDTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._rEASON_OLDTableAdapter]));
                    this._rEASON_OLDTableAdapter.Transaction = null;
                }
                if ((this._rEASONTableAdapter != null)) {
                    this._rEASONTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._rEASONTableAdapter]));
                    this._rEASONTableAdapter.Transaction = null;
                }
                if ((this._rEASON_TEMPTableAdapter != null)) {
                    this._rEASON_TEMPTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._rEASON_TEMPTableAdapter]));
                    this._rEASON_TEMPTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591